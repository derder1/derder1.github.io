<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Larthur</title>
  
  
  <link href="https://derder1.github.io/atom.xml" rel="self"/>
  
  <link href="https://derder1.github.io/"/>
  <updated>2022-08-14T08:37:19.151Z</updated>
  <id>https://derder1.github.io/</id>
  
  <author>
    <name>arthur</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>韩顺平面向对象</title>
    <link href="https://derder1.github.io/2022/08/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://derder1.github.io/2022/08/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-08-14T08:35:53.000Z</published>
    <updated>2022-08-14T08:37:19.151Z</updated>
    
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    <category term="韩顺平" scheme="https://derder1.github.io/categories/java/%E9%9F%A9%E9%A1%BA%E5%B9%B3/"/>
    
    <category term="面向对象" scheme="https://derder1.github.io/categories/java/%E9%9F%A9%E9%A1%BA%E5%B9%B3/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="面向对象" scheme="https://derder1.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>java基础韩顺平</title>
    <link href="https://derder1.github.io/2022/08/11/java%E5%9F%BA%E7%A1%80/"/>
    <id>https://derder1.github.io/2022/08/11/java%E5%9F%BA%E7%A1%80/</id>
    <published>2022-08-11T07:25:18.000Z</published>
    <updated>2022-08-14T08:39:12.827Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一定要打好基础</strong></p><h1 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h1><ol><li><p>包名</p><p> 多单词组成时所有字母小写：aaa.bbb.ccc</p></li><li><p>类名、接口名</p><p> 多单词组成时所有单词首字母大写</p></li><li><p>变量名、方法名</p><p> 多单词此组成时，第一个单词首字母小写，第二个单词开始时首字母大写，采用驼峰命名法</p></li><li><p>常量</p><p> 所有字母大写，多单词时用下划线连接</p></li></ol><h1 id="运行机制（p17）"><a href="#运行机制（p17）" class="headerlink" title="运行机制（p17）"></a>运行机制（p17）</h1><p>.java文件：源文件<br>.class文件：字节码文件<br>在cmd下<br>编译：javac hello.java<br>运行：java hello</p><h1 id="转义字符-p20"><a href="#转义字符-p20" class="headerlink" title="转义字符(p20)"></a>转义字符(p20)</h1><ol><li>\t : 一个制表为，实现对齐功能</li><li>\n : 换行符</li><li>\ : 一个\</li><li>&quot; : 一个”</li><li>&#39; : 一个’</li><li>\r : 一个回车,移动到当前行行首</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;hello\tword\tword&quot;</span>);<span class="comment">//hellowordword</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello\nword&quot;</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    hello</span></span><br><span class="line"><span class="comment">    word</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello\\word&quot;</span>);<span class="comment">//hello\word</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello\&quot;word&quot;</span>);<span class="comment">//hello&quot;word</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello\&#x27;word&quot;</span>);<span class="comment">//hello&#x27;word</span></span><br><span class="line">    用idea编译是word，如果用cmd会是wordo</span><br><span class="line">    System.out.println(<span class="string">&quot;hello\rword&quot;</span>);<span class="comment">//word</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="换行符-r，cmd运行"><a href="#换行符-r，cmd运行" class="headerlink" title="换行符\r，cmd运行"></a>换行符\r，cmd运行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;hello\rword&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;韩顺平教育\r北京&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;韩顺平教育\r\n北京&quot;</span>);</span><br></pre></td></tr></table></figure><p>运行结果</p><img src="https://s1.imagehub.cc/images/2022/08/08/imagefc30883cc073ae27.png"><h1 id="路径详解"><a href="#路径详解" class="headerlink" title="路径详解"></a>路径详解</h1><img src="https://img-blog.csdnimg.cn/49b8afd932ea477689229f89ea78f67b.png"><h1 id="数据类型-p40"><a href="#数据类型-p40" class="headerlink" title="数据类型(p40)"></a>数据类型(p40)</h1><img src="https://s1.imagehub.cc/images/2022/08/09/image.png"><img src="https://s1.imagehub.cc/images/2022/08/09/imageafc404bd4281bbad.png"><img src="https://s1.imagehub.cc/images/2022/08/09/imagec082405c603264ec.png"><h1 id="Scnner类"><a href="#Scnner类" class="headerlink" title="Scnner类"></a>Scnner类</h1><p>char输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> sc.next().charAt(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h1 id="位运算符-amp"><a href="#位运算符-amp" class="headerlink" title="位运算符 &amp; | ^ ~"></a>位运算符 &amp; | ^ ~</h1><pre><code>&amp; 按位与 : 两位全为1，结果1，否贼为0| 按位或 : 两位有一个为1，结果为1，否则为0^ 按位异或 : 两位不同为1，相同为0~ 取反</code></pre><h1 id="位运算符-gt-gt-、-lt-lt-p100"><a href="#位运算符-gt-gt-、-lt-lt-p100" class="headerlink" title="位运算符&gt;&gt;、&lt;&lt;  (p100)"></a>位运算符&gt;&gt;、&lt;&lt;  (p100)</h1><ol><li><p>算数右移&gt;&gt;:低位溢出，符号位不变，并用符号位补溢出的高危</p></li><li><p>算数左移&lt;&lt;:符号位不变，低位补0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>&gt;&gt;<span class="number">2</span>; <span class="comment">//00000001=&gt;00000000 本质1/2/2=0</span></span><br><span class="line"><span class="type">int</span> c=<span class="number">1</span>&lt;&lt;<span class="number">2</span>;<span class="comment">//00000001=&gt;00000100  本质1*2*2=4</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure></li><li><p>逻辑右移&gt;&gt;&gt;:也叫无符号右移，运算规则是:低位溢出，高位补0</p></li><li><p>没有&lt;&lt;&lt;符号</p></li></ol><h1 id="浮点类型-p42"><a href="#浮点类型-p42" class="headerlink" title="浮点类型(p42)"></a>浮点类型(p42)</h1><img src="https://s1.imagehub.cc/images/2022/08/09/imagea776d77988b30e64.png"><p>注意：</p><ul><li><strong>浮点数 &#x3D; 符号位+指数位+尾数位</strong></li><li>尾数部分可能丢失，造成精度损失(小数都是近似值)。</li></ul><h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><h1 id="Switch分支结构细节"><a href="#Switch分支结构细节" class="headerlink" title="Switch分支结构细节"></a>Switch分支结构细节</h1><p>细节一</p><ul><li>表达式数据类型，应和case后的常量类型一致</li><li>或者是可以自动转成可以相互比较的类型，比如输入的是字符，而常量是int<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span> (c)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;ok1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;ok2&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;default&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>细节二</li><li>switch（表达式）中表达式的返回值必须是<strong>byte, short, int, char, enum，String</strong></li></ul><p>细节三</p><ul><li>case字句中的值必须是常量，或者是常量表达式，而不能是变量。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span> (c)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;ok1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>+<span class="number">1</span>:<span class="comment">//常量表达式，正确</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ok1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> c2:   <span class="comment">//报错。不能用变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ok2&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;default&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>细节四</li><li>default字句是可选的，当没有匹配的case时，执行default</li><li>如果没有default字句，又没有匹配任何常量，则没有输出</li></ul><p>细节五</p><ul><li>break语句用来执行完一个case分之后使程序跳出switch语句块</li><li>如果没有写break，程序会顺序执行到switch结尾，除非执行到break<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;ok1&quot;</span>);</span><br><span class="line">                <span class="comment">//break;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;ok2&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;default&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/* 输出结果为</span></span><br><span class="line"><span class="comment">        ok1</span></span><br><span class="line"><span class="comment">        ok2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><p>switch练习</p><ol><li>使用switch把小写类型的char转为大写（键盘输入）。只转换a,b,c,d,e其他输出other<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入a-e&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> sc.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (c)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;other&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对学生成绩大于60分的，输出合格。低于60分的输出不合格（注:成绩不能大于100）</li></ol><ul><li>如果成绩在[60,100],(int)(成绩&#x2F;60)&#x3D;1  &#x2F;&#x2F;60以上除以60 的1.多 都会经过强转变成1</li><li>如果成绩在[0,60), (int)(成绩&#x2F;60)&#x3D;0<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        <span class="comment">//如果成绩在[60,100],(int)(成绩/60)=1</span></span><br><span class="line">        <span class="comment">//如果成绩在[0,60), (int)(成绩/60)=0</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(score&gt;=<span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> (<span class="type">int</span>)(score/<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">switch</span> (a) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//            default:</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;输入有误&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入成绩要在0-100&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>根据用于指定月份，打印该月份所属的季节。345春季，456夏季，9，10，11秋季，12,1,2冬季<br>提示使用穿透<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (month)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;输入月份不对（1-12）&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>switch和if的比较</li></ol><ul><li>如果判断具体数值不多，而且复合byte, short, int, char, enum，String虽然两个都可以用，建议选用Switch </li><li>其他情况：对区间判断，对结果为boolean类型判断，使用if，if的使用范围更广</li></ul><h1 id="for循环细节"><a href="#for循环细节" class="headerlink" title="for循环细节"></a>for循环细节</h1><ol><li>循环条件是返回一个布尔值的表达式</li><li>for(;循环判断条件;) 中的初始化和变量迭代可以写到其他地方，但是两边的分号不能省略<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;<span class="number">10</span>;)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>循环初始值可以有多个初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>; i&lt;count; i++, j += <span class="number">2</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i=&quot;</span>+i+<span class="string">&quot;j=&quot;</span>+j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">循环变量初始化;</span><br><span class="line">while(循环条件)&#123;</span><br><span class="line">    循环体（语句）;</span><br><span class="line">    循环变量迭代;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>+i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="dowhile"><a href="#dowhile" class="headerlink" title="dowhile"></a>dowhile</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">循环变量初始化;</span><br><span class="line">do&#123;</span><br><span class="line">    循环体(语句);</span><br><span class="line">    循环变量迭代;</span><br><span class="line">&#125;while(循环条件);</span><br></pre></td></tr></table></figure><ul><li>do while 是关键字</li><li>先执行再判断，一定会至少执行一次</li><li>最后要有一个分号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>+i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;=<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;退出循环&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li>dowhile 输出1到100和</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="keyword">while</span> (i&lt;=<span class="number">100</span>);</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><ol start="2"><li>如果李三不还钱，就使出五连鞭，直到还钱为止</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">char</span> <span class="variable">answer</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;五连鞭&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老韩：还钱？ y/n&quot;</span>);</span><br><span class="line">    answer = scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;他的回答是&quot;</span> + answer);</span><br><span class="line">&#125;<span class="keyword">while</span>(answer != <span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;李三还钱了&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>统计3个班的成绩情况，每个班有5名同学<br>求出各个班的平均分和所有班级的平均分[学生的成绩从键盘输入]，统计三个半及格人数，每个班有5名同学。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">double</span> <span class="variable">totalScore</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">passNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;<span class="comment">//班级</span></span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第&quot;</span> + i + <span class="string">&quot;个班的第&quot;</span> + j + <span class="string">&quot;个学生的成绩&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">        <span class="keyword">if</span> (score&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">            passNum++;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += score;</span><br><span class="line">        System.out.println(<span class="string">&quot;成绩为&quot;</span> + score);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span> + sum + <span class="string">&quot;平均分=&quot;</span> + sum / <span class="number">5</span>);</span><br><span class="line">    totalScore += sum;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;三个班总分&quot;</span> + totalScore + <span class="string">&quot;三个班平均分&quot;</span> + totalScore/<span class="number">15</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;及格人数&quot;</span> + passNum);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>打印空心金字塔</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">   ***</span></span><br><span class="line"><span class="comment">  *****</span></span><br><span class="line"><span class="comment"> *******</span></span><br><span class="line"><span class="comment">*********</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        <span class="comment">// 第1层 有1个*     2*1-1   有4个空格（总层数-i）</span></span><br><span class="line">        <span class="comment">// 第2层 有3个*     2*2-1   有3个空格</span></span><br><span class="line">        <span class="comment">// 第3层 有5个*     2*3-1   有2个空格</span></span><br><span class="line">        <span class="comment">// 第4层 有7个*     2*4-1   有1个空格</span></span><br><span class="line">        <span class="comment">// 第5层 有9个*     2*5-1   有0个空格</span></span><br><span class="line">        <span class="comment">/*       </span></span><br><span class="line"><span class="comment">        int totalLevel = 5;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for (int i = 1; i &lt;= totalLevel ; i++) &#123; //层数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            // 输出*之前还要输出空格</span></span><br><span class="line"><span class="comment">            for (int k = 1; k &lt;= totalLevel-i; k++ )&#123;</span></span><br><span class="line"><span class="comment">                System.out.print(&quot; &quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            for (int j = 1; j&lt;=2*i-1; j++)&#123;//控制每层的*个数</span></span><br><span class="line"><span class="comment">                System.out.print(&quot;*&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印空心金子塔</span></span><br><span class="line"><span class="comment">    *           // 第1层 有2个*     当前行的第一个是*，最后一个也是*</span></span><br><span class="line"><span class="comment">   * *          // 第2层 有2个*     当前行的第一个是*，最后一个也是*</span></span><br><span class="line"><span class="comment">  *   *         // 第3层 有2个*     当前行的第一个是*，最后一个也是*</span></span><br><span class="line"><span class="comment"> *     *        // 第4层 有2个*     当前行的第一个是*，最后一个也是*</span></span><br><span class="line"><span class="comment">*********       // 第5层 有9个*     全部输出*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 先死后活</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">totalLevel</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= totalLevel ; i++) &#123; <span class="comment">//层数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出*之前还要输出空格</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= totalLevel-i; k++ )&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//控制每层的*个数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j&lt;=<span class="number">2</span>*i-<span class="number">1</span>; j++)&#123;</span><br><span class="line">               <span class="comment">// 当前行的第一个是*，最后一个也是*,最后一行全部*</span></span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">1</span> || j == <span class="number">2</span>*i-<span class="number">1</span> || i == totalLevel) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random"></a>Math.random</h1><ul><li>Math.random()是令系统随机选取大于等于 0.0 且小于 1.0 的伪随机 double 值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Math.random());</span><br><span class="line"><span class="comment">//0.46532988952024534</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="break"><a href="#break" class="headerlink" title="break"></a>break</h1><p>执行流程</p><img src="https://s1.imagehub.cc/images/2022/08/13/image.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*执行结果</span></span><br><span class="line"><span class="comment">i=0</span></span><br><span class="line"><span class="comment">i=1</span></span><br><span class="line"><span class="comment">i=2</span></span><br></pre></td></tr></table></figure><p><strong>break细节</strong></p><ol><li>break语句出现在多层嵌套的语句块中时，可以通过标签名要终止的是哪一层语句块 </li><li>标签</li></ol><ul><li>break语句可以指定退出哪里</li><li>实际开发中，尽量不要使用标签</li><li>如果没有指定break，默认退出最近的循环体</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">        abc1:</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">        abc2:</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">10</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span> ;<span class="comment">//跳出最近的循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i=0</span></span><br><span class="line"><span class="comment">i=1</span></span><br><span class="line"><span class="comment">i=0</span></span><br><span class="line"><span class="comment">i=1</span></span><br><span class="line"><span class="comment">i=0</span></span><br><span class="line"><span class="comment">i=1</span></span><br><span class="line"><span class="comment">i=0</span></span><br><span class="line"><span class="comment">i=1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">        abc1:</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">        abc2:</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">10</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span> abc1;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i=0</span></span><br><span class="line"><span class="comment">i=1</span></span><br></pre></td></tr></table></figure><h1 id="跳转控制语句-continue"><a href="#跳转控制语句-continue" class="headerlink" title="跳转控制语句 continue"></a>跳转控制语句 continue</h1><ol><li><p>continue 语句用于结束本次循环，继续执行下一次循环</p></li><li><p>continue 语句出现在多层嵌套的循环语句体中，可以通过标签名知道要跳过的是哪一层循环，这个和前面的标签的使用规则一样。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">4</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i=1</span></span><br><span class="line"><span class="comment">i=3</span></span><br><span class="line"><span class="comment">i=4</span></span><br><span class="line"><span class="comment">i=5</span></span><br></pre></td></tr></table></figure><p><strong>continue 细节</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">        label1:</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            label2:</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span> label1;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i=0</span></span><br><span class="line"><span class="comment">i=1</span></span><br><span class="line"><span class="comment">i=0</span></span><br><span class="line"><span class="comment">i=1</span></span><br><span class="line"><span class="comment">i=0</span></span><br><span class="line"><span class="comment">i=1</span></span><br><span class="line"><span class="comment">i=0</span></span><br><span class="line"><span class="comment">i=1 </span></span><br></pre></td></tr></table></figure><h1 id="return"><a href="#return" class="headerlink" title="return"></a>return</h1><ul><li>return 使用在方法，表示跳出所在的方法，</li><li>如果return写在main方法，退出程序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">3</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;韩顺平教育&quot;</span> + i);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello word!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;go on&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hello word!</span></span><br><span class="line"><span class="comment">hello word!</span></span><br><span class="line"><span class="comment">韩顺平教育3</span></span><br></pre></td></tr></table></figure><h1 id="本章练习"><a href="#本章练习" class="headerlink" title="本章练习"></a>本章练习</h1><p>1. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(money &gt;<span class="number">50000</span>)&#123;</span><br><span class="line">        money = money - money*<span class="number">0.05</span>;</span><br><span class="line">        count++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (money&lt;= <span class="number">50000</span> &amp;&amp; money &gt;= <span class="number">1000</span>)&#123;</span><br><span class="line">        money -= <span class="number">1000</span>;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;可以过&quot;</span> + count + <span class="string">&quot;路口&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;剩下的钱&quot;</span> + money);</span><br></pre></td></tr></table></figure><ol start="6"><li>输出1-100 不能被5整除的数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i %<span class="number">5</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>输出小写的a-z以及大写的A-Z<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; c1 &lt;= <span class="string">&#x27;z&#x27;</span>; c1++)&#123;</span><br><span class="line">    System.out.print(c1+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;Z&#x27;</span>; c2 &gt;= <span class="string">&#x27;A&#x27;</span>; c2--)&#123;</span><br><span class="line">    System.out.print(c2+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>求出 1-1&#x2F;2+1&#x2F;3-1&#x2F;4….1&#x2F;100的和</li></ol><ul><li>要把公式分子1 写成1.0才能得到精确地小数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>)&#123;<span class="comment">//分母为奇数</span></span><br><span class="line">        sum += (<span class="number">1.0</span>/i);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        sum -= (<span class="number">1.0</span>/i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure></li></ul><ol start="9"><li>1+(1+2)+(1+2+3)+….+(1+2+3+…+100)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">        sum += j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;sum&quot;</span> + sum);</span><br></pre></td></tr></table></figure><h1 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h1><ul><li>数组在默认情况下是引用传递，赋的值是地址，赋值方法为引用传达</li><li>是一个地址，arr2变化会影响到arr1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">//基本数据类型赋值，赋值方式为值拷贝</span></span><br><span class="line">        <span class="comment">//n2的变化，不会影响到n1的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> n1;</span><br><span class="line">        n2 = <span class="number">80</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;n1=&quot;</span>+n1);</span><br><span class="line">        System.out.println(<span class="string">&quot;n2=&quot;</span>+n2);</span><br><span class="line">        <span class="comment">//数组在默认情况下是引用传递，赋的值是地址，赋值方法为引用传达</span></span><br><span class="line">        <span class="comment">//是一个地址，arr2变化会影响到arr1</span></span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = arr1;</span><br><span class="line">        arr2[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;arr1.length; i++)&#123;</span><br><span class="line">            System.out.println(arr1[i]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">n1=10</span></span><br><span class="line"><span class="comment">n2=80</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br></pre></td></tr></table></figure><h2 id="值传递-x2F-值拷贝-和-引用传递-x2F-地址拷贝的区别"><a href="#值传递-x2F-值拷贝-和-引用传递-x2F-地址拷贝的区别" class="headerlink" title="值传递&#x2F;值拷贝 和 引用传递&#x2F;地址拷贝的区别"></a>值传递&#x2F;值拷贝 和 引用传递&#x2F;地址拷贝的区别</h2><img src = "https://s1.imagehub.cc/images/2022/08/14/image.png"><h2 id="反转数组"><a href="#反转数组" class="headerlink" title="反转数组"></a>反转数组</h2><ol><li><p>找规律反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; len /<span class="number">2</span>; i++)&#123;</span><br><span class="line">    temp = arr[len-i-<span class="number">1</span>];</span><br><span class="line">    arr[len-i-<span class="number">1</span>] = arr[i];</span><br><span class="line">    arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;反转后的数组&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>逆序赋值方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length-<span class="number">1</span>,j = <span class="number">0</span>;i &gt;= <span class="number">0</span>; i--,j++)&#123;</span><br><span class="line">    arr2[j] = arr[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;反转后的数组&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; arr2.length; i++)&#123;</span><br><span class="line">    System.out.println(arr2[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h1><img src ="https://s1.imagehub.cc/images/2022/08/14/imageb1c99fcdc5dc4e3c.png" ><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">        <span class="type">int</span>[] arr= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arrNew = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length ; i++) &#123;</span><br><span class="line">            arrNew[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        arrNew[arrNew.length - <span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">        <span class="comment">//让arr指向arrNew</span></span><br><span class="line">        arr = arrNew;</span><br><span class="line">        System.out.println(<span class="string">&quot;扩容后的arr&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            System.out.print(arr[i] +  <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">扩容后的arr</span></span><br><span class="line"><span class="comment">1234</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="6"><li>创建Scanner可以接受用户输入</li><li>因为用户什么时候退出，不确定，使用do-while + break来控制</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arrNew = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arrNew[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要添加的元素&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">addNum</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        arrNew[arrNew.length - <span class="number">1</span>] = addNum;</span><br><span class="line">        <span class="comment">//让arr指向arrNew</span></span><br><span class="line">        arr = arrNew;</span><br><span class="line">        System.out.println(<span class="string">&quot;扩容后的arr&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;是否继续添加 y/n&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;退出了添加&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">57</span>, <span class="number">13</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">                <span class="comment">//如果前面大于后面，交换</span></span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = arr[i];</span><br><span class="line">                    arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">                    arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n第&quot;</span>+ (j+<span class="number">1</span>) + <span class="string">&quot;轮&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第1轮</span></span><br><span class="line"><span class="comment">24 69 57 13 80 </span></span><br><span class="line"><span class="comment">第2轮</span></span><br><span class="line"><span class="comment">24 57 13 69 80 </span></span><br><span class="line"><span class="comment">第3轮</span></span><br><span class="line"><span class="comment">24 13 57 69 80 </span></span><br><span class="line"><span class="comment">第4轮</span></span><br><span class="line"><span class="comment">13 24 57 69 80 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    String[]  names = &#123;<span class="string">&quot;白眉鹰王&quot;</span>, <span class="string">&quot;金毛狮王&quot;</span>, <span class="string">&quot;紫衫龙王&quot;</span>, <span class="string">&quot;青翼蝠王&quot;</span>&#125;;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入要查找的&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">findName</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; names.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (findName.equals(names[i]))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜找到&quot;</span> + findName);</span><br><span class="line">            System.out.println(<span class="string">&quot;下标为&quot;</span> + i);</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index == -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;没有&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><img src = "https://s1.imagehub.cc/images/2022/08/14/image1fab2a4c17c4621c.png"><h1 id="杨辉三角形"><a href="#杨辉三角形" class="headerlink" title="杨辉三角形"></a>杨辉三角形</h1><p>从第三行开始，对于非第一个和最后一个元素的值arr[i][j] &#x3D; arr[i-1][j] + arr[i-1][j-1];</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] yangHui = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; yangHui.length; i++)&#123;<span class="comment">//遍历杨辉的每个元素</span></span><br><span class="line">        <span class="comment">//给每个一维数组（行） 开空间</span></span><br><span class="line">        yangHui[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//给每一个一维数组（行）赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;yangHui[i].length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span> || j == yangHui[i].length-<span class="number">1</span>)&#123;</span><br><span class="line">                yangHui[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                yangHui[i][j] = yangHui[i-<span class="number">1</span>][j] + yangHui[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; yangHui.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;yangHui[i].length; j++)&#123;</span><br><span class="line">            System.out.print(yangHui[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><img src = "https://s1.imagehub.cc/images/2022/08/14/image0912b0056b2d2eb1.png"><ol start="4"><li>已知有个升序的数组，要求插入一个元素，该数组顺序依然是升序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] arr =&#123;<span class="number">10</span>,<span class="number">12</span>,<span class="number">45</span>,<span class="number">90</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">insertNum</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (insertNum &lt;= arr[i])&#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//找到位置就退出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">        index = arr.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] arrNew = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//将arr的元素拷贝到arrNew，并且要跳过index位置</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    分析</span></span><br><span class="line"><span class="comment">    int[] arr =&#123;10,12,45,90&#125;;</span></span><br><span class="line"><span class="comment">    arrNew = &#123;          &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; arrNew.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i != index)&#123;<span class="comment">//说明可以把arr的元素拷贝到arrnew</span></span><br><span class="line">            arrNew[i] = arr[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// i这个位置就是要插入的数</span></span><br><span class="line">            arrNew[i] = insertNum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//让arr指向arrNew</span></span><br><span class="line">    arr = arrNew;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;插入后，arr数组的情况&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length ; i++) &#123;</span><br><span class="line">        System.out.print(arr[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><p>四种访问控制修饰符号</p><ol><li>公开级别： public，对外公开</li><li>受保护级别： protected修饰，对子类和同一个包中的类公开</li><li>默认级别：没有修饰符号，向同一个包的类公开</li><li>私有级别：private修饰，只有类本身可以访问，不对外公开</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//公开</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> n2= <span class="number">200</span>;<span class="comment">//受保护</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">300</span>;<span class="comment">//默认</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">400</span>;<span class="comment">//私有</span></span><br></pre></td></tr></table></figure><img src="https://www.helloimg.com/images/2022/07/28/Zwvkfo.png">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;一定要打好基础&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;标识符命名规范&quot;&gt;&lt;a href=&quot;#标识符命名规范&quot; class=&quot;headerlink&quot; title=&quot;标识符命名规范&quot;&gt;&lt;/a&gt;标识符命名规范&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;包名&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="java" scheme="https://derder1.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>io流</title>
    <link href="https://derder1.github.io/2022/08/10/io/"/>
    <id>https://derder1.github.io/2022/08/10/io/</id>
    <published>2022-08-10T06:24:00.000Z</published>
    <updated>2022-08-14T13:16:57.302Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV15B4y1u7Rn?from=search&seid=7356381024257022254&spm_id_from=333.337.0.0&vd_source=0c82d50ac822c5e1f490f06791c748ad">韩顺平io</a></p><img src="https://s1.imagehub.cc/images/2022/08/07/image51420d253ce7ac75.png"><h1 id="1、文件"><a href="#1、文件" class="headerlink" title="1、文件"></a>1、文件</h1><p>文件是保存数据的地方。</p><h2 id="1-文件流"><a href="#1-文件流" class="headerlink" title="1.文件流"></a>1.文件流</h2><p>文件在程序中是以流的形式来操作的。</p><img src="https://s1.imagehub.cc/images/2022/08/08/image.png"><p>流：数据在数据源（文件）和程序（内存）之间经历的路径；</p><p>输入流：数据从数据源（文件）到程序（内存）的路径；</p><p>输出流：数据从程序（内存）到数据源（文件）的路径。</p><h2 id="2-创建文件对象相关构造器和方法"><a href="#2-创建文件对象相关构造器和方法" class="headerlink" title="2. 创建文件对象相关构造器和方法"></a>2. 创建文件对象相关构造器和方法</h2><img src="https://s1.imagehub.cc/images/2022/08/08/imageb2979aa4fdf7547f.png"><p>方法</p><ul><li>new File(String pathname) &#x2F;&#x2F;根据路径构建一个File对- </li><li>new File(File parent,String child) &#x2F;&#x2F;根据父目录文件+子路径构建一个File对- </li><li>new File(String parent,String child) &#x2F;&#x2F;根据父目录+子路径构建一个File对- </li><li>使用createNewFile创建新文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DynamicTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCreate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方式一</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\news1.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2 new File(File parent,String child) //根据父目录文件+子路径构建</span></span><br><span class="line">    <span class="comment">//e:\\news2.txt</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">parentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news2.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//这里的file对象，在java程序中，只是一个对象</span></span><br><span class="line">        <span class="comment">//只有执行了createNewFile 方法，才会真正的，在磁盘创建该文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentFile, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式三new File(String parent,String child) //根据父目录+子路径构建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">parpentPath</span> <span class="operator">=</span> <span class="string">&quot;e:\\&quot;</span>;</span><br><span class="line"><span class="comment">//        String parpentPath = &quot;e:/&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;new3.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parpentPath, fileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-获取文件信息"><a href="#3-获取文件信息" class="headerlink" title="3. 获取文件信息"></a>3. 获取文件信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInformation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先创建文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>((<span class="string">&quot;e:\\news1.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用相应的方法，得到对应信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件名字=&quot;</span> + file.getName());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;文件绝对路径=&quot;</span>+file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;文件父级目录&quot;</span>+ file.getParent());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;文件大小（字节）=&quot;</span> + file.length());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否存在=&quot;</span> + file.exists());<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一个文件=&quot;</span> + file.isFile());<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一个目录&quot;</span> + file.isDirectory());<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-目录操作和文件的删除"><a href="#4-目录操作和文件的删除" class="headerlink" title="4.目录操作和文件的删除"></a>4.目录操作和文件的删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Directory_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断 d:\\news1.txt 是否存在，如果存在就删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\new3.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">           <span class="keyword">if</span>( file.delete())&#123;</span><br><span class="line">               System.out.println(filePath+<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断 D:\\demo02 是否存在，存在就删除，否则提示不存在</span></span><br><span class="line">    <span class="comment">//这里我们需要体会到，在java编程中，目录也被当做文件</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\new&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">            <span class="keyword">if</span>( file.delete())&#123;</span><br><span class="line">                System.out.println(filePath+<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该目录不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断 D:\\demo\\a\\b\\c 目录是否存在，如果存在就提示已经存在，否则就创建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">directoryPath</span> <span class="operator">=</span> <span class="string">&quot;e:\\new\\new\\w&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(directoryPath);</span><br><span class="line">        <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">            System.out.println(directoryPath + <span class="string">&quot;该目录存在&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>( file.mkdirs())&#123;<span class="comment">//创建一级目录使用mkdir() ，创建多级目录使用mkdirs()</span></span><br><span class="line">               System.out.println(directoryPath +<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断 D:\\demo 目录是否存在，如果存在就提示已经存在，否则就创建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">directoryPath</span> <span class="operator">=</span> <span class="string">&quot;e:\\new&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(directoryPath);</span><br><span class="line">        <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">            System.out.println(directoryPath + <span class="string">&quot;该目录存在&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>( file.mkdirs())&#123;<span class="comment">//创建一级目录使用mkdir() ，创建多级目录使用mkdirs()</span></span><br><span class="line">                System.out.println(directoryPath +<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：创建一级目录使用mkdir() ，创建多级目录使用mkdirs</strong></p><h1 id="IO流原理及流的分类"><a href="#IO流原理及流的分类" class="headerlink" title="IO流原理及流的分类"></a>IO流原理及流的分类</h1><h2 id="1-Java-IO流原理"><a href="#1-Java-IO流原理" class="headerlink" title="1. Java IO流原理"></a>1. Java IO流原理</h2><pre><code>（1）I/O是Input/Output的缩写，I/O技术是非常实用的技术，用于处理数据传输。如读/写文  件，网络通讯等；（2）Java程序中，对于数据的输入/输出操作以“流（stream）”的方式进行；（3）java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过方法输入或输出数  据；（4）输入input：读取外部数据（磁盘，光盘等存储设备的数据）到程序（内存）中；（5）输出output：将程序（内存）数据输出到磁盘，光盘等存储设备中。</code></pre><h2 id="2-流的分类"><a href="#2-流的分类" class="headerlink" title="2. 流的分类"></a>2. 流的分类</h2><pre><code>（1）按照操作数据单位不同分为：字节流（8bit）【便于处理二进制文件】，字符流（按字符）【便于处理文本文件】；（2）按数据流的流入不同分为：输入流，输出流；（3）按流的角色的不同分为：节点流，处理流/包装流。&lt;img src=&quot;https://s1.imagehub.cc/images/2022/08/08/imagef1d455e7232abfa2.png&quot;&gt;</code></pre><ul><li><p>Java的IO流共涉及40多个类，实际上非常规则，都是从如上4个抽象基类派生的；</p></li><li><p>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</p></li></ul><h2 id="3-InputStream（字节输入流）常用的子类"><a href="#3-InputStream（字节输入流）常用的子类" class="headerlink" title="3.InputStream（字节输入流）常用的子类"></a>3.InputStream（字节输入流）常用的子类</h2><p>InputStream（字节输入流）常用的子类<br><img src="https://s1.imagehub.cc/images/2022/08/08/imagee06ab36f7821bb16.png"></p><h3 id="快捷键-ctrl-alt-t-进行try-cath捕获异常"><a href="#快捷键-ctrl-alt-t-进行try-cath捕获异常" class="headerlink" title="快捷键 ctrl + alt + t 进行try cath捕获异常"></a>快捷键 ctrl + alt + t 进行try cath捕获异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.inputstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readData</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 FileInputStream 对象，用于读取 文件</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//从该输入流读取一个字节的数据。 如果没有输入可用，此方法将阻止。</span></span><br><span class="line">            <span class="comment">//如果返回-1 , 表示读取完毕</span></span><br><span class="line">            <span class="keyword">while</span> ((readData = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) readData);<span class="comment">//转成char显示</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭文件流，释放资源.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readData</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 FileInputStream 对象，用于读取 文件</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//从该输入流读取一个字节的数据。 如果没有输入可用，此方法将阻止。</span></span><br><span class="line">            <span class="comment">//如果返回-1 , 表示读取完毕</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));<span class="comment">//显示</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭文件流，释放资源.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-FileOutputStream"><a href="#4-FileOutputStream" class="headerlink" title="4.FileOutputStream"></a>4.FileOutputStream</h2><img src="https://s1.imagehub.cc/images/2022/08/09/imagefd5043765a589047.png"><p>老师说明：</p><ol><li>new FileOutputStream(filePath) 创建方式，当写入内容是，会覆盖原来的内容</li><li>new FileOutputStream(filePath, true) 创建方式，当写入内容是，是追加到文件后面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.outputstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStream01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建FileOutputStream对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//得到FileOutputStream对象</span></span><br><span class="line">            <span class="comment">//老师说明</span></span><br><span class="line">            <span class="comment">//1. new FileOutputStream(filePath) 创建方式，当写入内容是，会覆盖原来的内容</span></span><br><span class="line">            <span class="comment">//2. new FileOutputStream(filePath, true) 创建方式，当写入内容是，是追加到文件后面</span></span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//写入一个字节</span></span><br><span class="line"><span class="comment">//           fileOutputStream.write(&#x27;H&#x27;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//写入字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello,word&quot;</span>;</span><br><span class="line">            <span class="comment">//str.getBytes(),可以把字符串-&gt; 字节数组</span></span><br><span class="line">                fileOutputStream.write(str.getBytes());</span><br><span class="line"></span><br><span class="line">          <span class="comment">//  write(byte[] b, int off, int len) 将 len字节从位于偏移量 off的指定字节数组写入此文件输出流</span></span><br><span class="line">                fileOutputStream.write(str.getBytes(),<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileOutputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-文件拷贝"><a href="#5-文件拷贝" class="headerlink" title="5.文件拷贝"></a>5.文件拷贝</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.outputstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCopy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//将e:\\a.png 拷贝到</span></span><br><span class="line">        <span class="comment">//思路分析</span></span><br><span class="line">        <span class="comment">//1.创建文件输入流，将文件读入程序，将读取到的文件数据，写入到指定的文件</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.jpg&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a2.jpg&quot;</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath);</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义一个字节数组，提高读取效率</span></span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//读取后就写入文件通过 fileOutputStream</span></span><br><span class="line">                <span class="comment">//一边读，一边写</span></span><br><span class="line">                fileOutputStream.write(buf,<span class="number">0</span>,readLen);<span class="comment">//一定要使用这个方法</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;拷贝成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fileOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-FileReader-和-FileWriter介绍"><a href="#6-FileReader-和-FileWriter介绍" class="headerlink" title="6. FileReader 和 FileWriter介绍"></a>6. FileReader 和 FileWriter介绍</h2><h3 id="1-FileReader字符输入流"><a href="#1-FileReader字符输入流" class="headerlink" title="1. FileReader字符输入流"></a>1. FileReader字符输入流</h3><img src="https://s1.imagehub.cc/images/2022/08/09/image947920959727f36a.png"><blockquote><p>使用FileReader从story.txt读取内容并显示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.reader_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单个字符读取文件</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\story.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1.创建一个FileReader对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            <span class="comment">//循环读取,使用read,单个字符读取</span></span><br><span class="line">            <span class="keyword">while</span> ((data = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符数组读取文件</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile04</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;readFile04&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\story.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="comment">//1.创建一个FileReader对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            <span class="comment">//循环读取,使用read(buf)，返回是实际读取到的字符数</span></span><br><span class="line">            <span class="comment">//如果返回-1，说明到文件结束</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileReader.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,readLen));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-FileWriter"><a href="#2-FileWriter" class="headerlink" title="2.FileWriter"></a>2.FileWriter</h3><img src="https://s1.imagehub.cc/images/2022/08/09/image94bef54994a142f4.png"><img src="https://s1.imagehub.cc/images/2022/08/09/image875ede64659a65f6.png"><p>对应FileWriter , 一定要关闭流，或者flush才能真正的把数据写入到文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fileWiter01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\note.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWriter = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath);<span class="comment">//默认是覆盖</span></span><br><span class="line">            fileWriter.write(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            fileWriter.write(chars);</span><br><span class="line"></span><br><span class="line">            fileWriter.write(<span class="string">&quot;韩顺平教育&quot;</span>.toCharArray(),<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            fileWriter.write(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">            fileWriter.write(<span class="string">&quot;卷死各位&quot;</span>);</span><br><span class="line"></span><br><span class="line">            fileWriter.write(<span class="string">&quot;上海天津&quot;</span>,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 对应FileWriter , 一定要关闭流，或者flush才能真正的把数据写入到文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 源码</span></span><br><span class="line"><span class="comment">    private void writeBytes() throws IOException &#123;</span></span><br><span class="line"><span class="comment">        this.bb.flip();</span></span><br><span class="line"><span class="comment">        int var1 = this.bb.limit();</span></span><br><span class="line"><span class="comment">        int var2 = this.bb.position();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        assert var2 &lt;= var1;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        int var3 = var2 &lt;= var1 ? var1 - var2 : 0;</span></span><br><span class="line"><span class="comment">        if (var3 &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">            if (this.ch != null) &#123;</span></span><br><span class="line"><span class="comment">                assert this.ch.write(this.bb) == var3 : var3;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                this.out.write(this.bb.array(), this.bb.arrayOffset() + var2, var3);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        this.bb.clear();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileWriter.flush();</span><br><span class="line">               <span class="comment">// fileWriter.close();</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV15B4y1u7Rn?from=search&amp;seid=7356381024257022254&amp;spm_id_from=333.337.0.0&amp;vd_source=0c82d50ac822c</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    <category term="韩顺平" scheme="https://derder1.github.io/categories/java/%E9%9F%A9%E9%A1%BA%E5%B9%B3/"/>
    
    
    <category term="File" scheme="https://derder1.github.io/tags/File/"/>
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="https://derder1.github.io/2022/08/09/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://derder1.github.io/2022/08/09/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2022-08-09T10:04:42.000Z</published>
    <updated>2022-08-11T14:45:29.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络编程概念"><a href="#网络编程概念" class="headerlink" title="网络编程概念"></a>网络编程概念</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络编程概念&quot;&gt;&lt;a href=&quot;#网络编程概念&quot; class=&quot;headerlink&quot; title=&quot;网络编程概念&quot;&gt;&lt;/a&gt;网络编程概念&lt;/h1&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="TCP UDP" scheme="https://derder1.github.io/tags/TCP-UDP/"/>
    
    <category term="ip" scheme="https://derder1.github.io/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title>leetcode</title>
    <link href="https://derder1.github.io/2022/08/08/leetcode/"/>
    <id>https://derder1.github.io/2022/08/08/leetcode/</id>
    <published>2022-08-08T01:59:20.000Z</published>
    <updated>2022-08-08T07:10:12.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="剑指offer03-数组中重复的数字"><a href="#剑指offer03-数组中重复的数字" class="headerlink" title="剑指offer03,数组中重复的数字"></a>剑指offer03,数组中重复的数字</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.Leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">findRepeatNumber</span> &#123;</span><br><span class="line">    <span class="comment">//数组中重复的数字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(frn(nums));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">int</span> <span class="title function_">frn</span><span class="params">(<span class="type">int</span> nums[])</span>&#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(num))</span><br><span class="line">                <span class="keyword">return</span> num;</span><br><span class="line">                set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="剑指offer05替换空格"><a href="#剑指offer05替换空格" class="headerlink" title="剑指offer05替换空格"></a>剑指offer05替换空格</h1><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.Leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">replaceSpace</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;We are happy.&quot;</span>;</span><br><span class="line">        System.out.println(replaceSpace(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c: s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                res.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;剑指offer03-数组中重复的数字&quot;&gt;&lt;a href=&quot;#剑指offer03-数组中重复的数字&quot; class=&quot;headerlink&quot; title=&quot;剑指offer03,数组中重复的数字&quot;&gt;&lt;/a&gt;剑指offer03,数组中重复的数字&lt;/h1&gt;&lt;figure c</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="leetcode" scheme="https://derder1.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>枚举</title>
    <link href="https://derder1.github.io/2022/08/07/%E6%9E%9A%E4%B8%BE/"/>
    <id>https://derder1.github.io/2022/08/07/%E6%9E%9A%E4%B8%BE/</id>
    <published>2022-08-07T06:41:04.000Z</published>
    <updated>2022-08-13T04:06:50.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义枚举"><a href="#自定义枚举" class="headerlink" title="自定义枚举"></a>自定义枚举</h1><p> 枚举enum(enumeration，简写enum)</p><ol><li>常量的集合</li><li>可以理解为枚举是一种特殊的类，里面包含一组有限的特定对象。</li></ol><h2 id="枚举两种实现方式"><a href="#枚举两种实现方式" class="headerlink" title="枚举两种实现方式"></a>枚举两种实现方式</h2><ol><li>自定义类实现枚举</li><li>enum关键字实现枚举</li></ol><h2 id="1-自定义类实现枚举："><a href="#1-自定义类实现枚举：" class="headerlink" title="1.自定义类实现枚举："></a>1.自定义类实现枚举：</h2><pre><code>（1）把构造器私有化，set方法注销，只允许读数据。（2）对枚举对象使用public static final共同修饰，实现底层化。（3）枚举对象名通常使用全部大写，常量的命名规范。（4) 枚举对象根据需要，可以有多个属性（春天、温暖）。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.enum_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enumeration01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(Season.AUTUMN);</span><br><span class="line">        System.out.println(Season.SPRING);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示自定义枚举实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="comment">//定义了四个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造器私有化,目的防止 直接new</span></span><br><span class="line">    <span class="comment">//2.去掉set×××方法，防止属性被修改</span></span><br><span class="line">    <span class="comment">//3.在Season内部，直接创建固定的对象</span></span><br><span class="line">    <span class="comment">//4.优化 ，可以加入final修饰符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">s</span><br></pre></td></tr></table></figure><h2 id="2-enum关键字实现枚举"><a href="#2-enum关键字实现枚举" class="headerlink" title="2. enum关键字实现枚举"></a>2. enum关键字实现枚举</h2><p>enum关键字实现枚举：</p><pre><code>1、 使用enum替代class2、public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;);直接使用 SPRING(&quot;春天&quot;, &quot;温暖&quot;)解读   常量（实参列表）3、如果有多个常量（对象），使用逗号间隔即可4、如果使用enum来实现枚举，要求将定义常量对象，写在前面，属性写在后面</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.enum_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enumeration01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为对于季节而言，他的对象（具体指），是固定的四个，不会有更多</span></span><br><span class="line">        <span class="comment">//按老韩的设计类思路，不能提现季节是固定的四个对象</span></span><br><span class="line">        <span class="comment">//因此，这样的设计不好  ====》枚举类[枚：一个一个 举：列举，]</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Season2.WINTER);</span><br><span class="line">        System.out.println(Season2.SPRING);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示自定义枚举实现</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season2</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义了四个对象</span></span><br><span class="line"><span class="comment">//    public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;);</span></span><br><span class="line"><span class="comment">//    public static final Season WINTER = new Season(&quot;冬天&quot;, &quot;寒冷&quot;);</span></span><br><span class="line"><span class="comment">//    public static final Season SUMMER = new Season(&quot;夏天&quot;, &quot;炎热&quot;);</span></span><br><span class="line"><span class="comment">//    public static final Season AUTUMN = new Season(&quot;秋天&quot;, &quot;凉爽&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果使用了enum来实现枚举类</span></span><br><span class="line">    <span class="comment">//1. 使用关键字enum来代替class</span></span><br><span class="line">    <span class="comment">//2. public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;);直接使用 SPRING(&quot;春天&quot;,&quot;温暖&quot;);解读 常量名(实参列表)</span></span><br><span class="line">    <span class="comment">//3.如果有多个常量(对象), 使用，号间隔即可</span></span><br><span class="line">    <span class="comment">//如果使用enum来实现枚举，要求将定义常量对象，写在前面</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>), WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>),SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>),AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season2</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用关键字enum注意事项"><a href="#使用关键字enum注意事项" class="headerlink" title="使用关键字enum注意事项"></a>使用关键字enum注意事项</h2><pre><code>1、使用enum关键字开发枚举时，会默认继承Enum类，而且是final类。2、传统的public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;);直接使用 SPRING(&quot;春天&quot;, &quot;温暖&quot;）；要知道调用的是那个构造器（2个参数构造器）。3、如果使用无参构造器创建枚举对象，则实参列表和小括号可以省略，例What</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span>&#123;</span><br><span class="line">          SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>), WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>),SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>),What;</span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">Season2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>4、枚举对象必须放在枚举类的行首 SPRING(&quot;春天&quot;,&quot;温暖&quot;), WINTER(&quot;冬天&quot;, &quot;寒冷&quot;),SUMMER(&quot;夏天&quot;, &quot;炎热&quot;);放在最前面</code></pre><h2 id="枚举练习"><a href="#枚举练习" class="headerlink" title="枚举练习"></a>枚举练习</h2><p>下面代码是否正确？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span>&#123;</span><br><span class="line">    BOY,GIRL;<span class="comment">//这里其实就是调用Gender类的无参构造器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>以上代码正确</li><li>有一个枚举类Gender，没有属性</li><li>有两个咩距对象BOY，GIRL，使用的无参构造器创建</li></ol> <img src="https://s1.imagehub.cc/images/2022/08/07/image231e18ff9c7c3638.png"><h1 id="Enum成员方法"><a href="#Enum成员方法" class="headerlink" title="Enum成员方法"></a>Enum成员方法</h1> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.enum_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用Season02枚举类来演示各种方法</span></span><br><span class="line">        <span class="type">Season2</span> <span class="variable">autumn</span> <span class="operator">=</span> Season2.AUTUMN;</span><br><span class="line">        <span class="comment">//输出枚举对象的名字</span></span><br><span class="line">        System.out.println(autumn.name());<span class="comment">//AUTUMN</span></span><br><span class="line">        <span class="comment">//.ordinnal() 输出该枚举对象的次序/编号，从0开始编号</span></span><br><span class="line">        <span class="comment">//AUTUMN枚举对象是第四个，因此输出3</span></span><br><span class="line">        System.out.println(autumn.ordinal());<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从反编译可以看出values方法，返回Season2[]</span></span><br><span class="line">        <span class="comment">//含有定义的所有枚举对象</span></span><br><span class="line">        Season2[] values = Season2.values();</span><br><span class="line">        <span class="keyword">for</span> (Season2 season:values) &#123;</span><br><span class="line">            System.out.println(season);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*输出结果</span></span><br><span class="line"><span class="comment">        Season&#123;name=&#x27;春天&#x27;, desc=&#x27;温暖&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Season&#123;name=&#x27;冬天&#x27;, desc=&#x27;寒冷&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Season&#123;name=&#x27;夏天&#x27;, desc=&#x27;炎热&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Season&#123;name=&#x27;秋天&#x27;, desc=&#x27;凉爽&#x27;&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//valueof(),将字符串转换成枚举对象，要求字符串必须是已有的常量名，否则报异常</span></span><br><span class="line">        <span class="comment">//根据你输出的&quot;AUTUMN&quot;到Season2的枚举对象中去找</span></span><br><span class="line">        <span class="comment">//如果找到了就返回，没有找到就报错</span></span><br><span class="line">        <span class="type">Season2</span> <span class="variable">autumn1</span> <span class="operator">=</span> Season2.valueOf(<span class="string">&quot;AUTUMN&quot;</span>);</span><br><span class="line">        System.out.println(autumn1);<span class="comment">//Season&#123;name=&#x27;秋天&#x27;, desc=&#x27;凉爽&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//compareTo</span></span><br><span class="line">        <span class="comment">//1、把Season2.AUTUMN和Season2.SUMMER编号进行比较</span></span><br><span class="line">        <span class="comment">//2、Season2.AUTUMN[3]-Season2.SUMMER[2],比较谁前谁后</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Season2.AUTUMN.compareTo(Season2.SUMMER));<span class="comment">//1,AUTUMN的编号是3，SUMMER是2</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public final int compareTo(E o) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            return self.ordinal - other.ordinal;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season2</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果使用了enum来实现枚举类</span></span><br><span class="line">    <span class="comment">//1. 使用关键字enum来代替class</span></span><br><span class="line">    <span class="comment">//2. public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;);直接使用 SPRING(&quot;春天&quot;,&quot;温暖&quot;);解读 常量名(实参列表)</span></span><br><span class="line">    <span class="comment">//3.如果有多个常量(对象), 使用，号间隔即可</span></span><br><span class="line">    <span class="comment">//4.如果使用enum来实现枚举，要求将定义常量对象，写在前面</span></span><br><span class="line">    <span class="comment">//5. 如果使用的是无参构造器创建常量对象，则可以省略()</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>), WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>),SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>),AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="title function_">Season2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season2</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义枚举&quot;&gt;&lt;a href=&quot;#自定义枚举&quot; class=&quot;headerlink&quot; title=&quot;自定义枚举&quot;&gt;&lt;/a&gt;自定义枚举&lt;/h1&gt;&lt;p&gt; 枚举enum(enumeration，简写enum)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;常量的集合&lt;/li&gt;
&lt;li&gt;可以</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="枚举" scheme="https://derder1.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>日志框架</title>
    <link href="https://derder1.github.io/2022/08/07/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    <id>https://derder1.github.io/2022/08/07/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</id>
    <published>2022-08-07T03:01:00.000Z</published>
    <updated>2022-08-07T13:11:42.556Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Cv411372m?p=145&vd_source=0c82d50ac822c5e1f490f06791c748ad"> 日志框架视频</a></p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="日志技术的优势"><a href="#日志技术的优势" class="headerlink" title="日志技术的优势"></a>日志技术的优势</h2><p>日志技术具备的优势</p><ul><li><p>可以将系统执行的信息选择性的记录到指定的位置（控制台、文件中、数据库中）。</p></li><li><p>可以随时以开关的形式控制是否记录日志，无需修改源代码。</p></li></ul><p>日志技术的具体优势？<br><img src="https://s1.imagehub.cc/images/2022/08/07/imagee8bd6d00d92a7ef5.png"></p><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><img src="https://s1.imagehub.cc/images/2022/08/07/image.png">日志规范：一些接口，提供给日志的实现框架设计的标准。<p>日志框架：牛人或者第三方公司已经做好的日志记录实现代码，后来者直接可以拿去使用。</p><p>因为对Commons Logging的接口不满意，有人就搞了SLF4J。因为对Log4j的性能不满意，有人就搞了Logback。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>日志的规范是什么，常见的有几种形式。</p><p> 日志规范大多是一些接口，提供给实现框架去设计的。</p><p> 常见的规范是：</p><p> Commons Logging</p><p> Simple Logging Facade for Java</p></li><li><p>日志的实现框架有哪些常见的？</p><p> Log4J</p><p> Logback(我们重点学习的，其他的都大同小异)</p></li></ol><h2 id="Logback概述"><a href="#Logback概述" class="headerlink" title="Logback概述"></a>Logback概述</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Cv411372m?p=145&amp;vd_source=0c82d50ac822c5e1f490f06791c748ad&quot;&gt; 日志框架视频&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;日志&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="logback" scheme="https://derder1.github.io/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>javaScript</title>
    <link href="https://derder1.github.io/2022/08/04/javaScript/"/>
    <id>https://derder1.github.io/2022/08/04/javaScript/</id>
    <published>2022-08-04T09:33:10.000Z</published>
    <updated>2022-08-04T09:40:43.282Z</updated>
    
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="javaScript" scheme="https://derder1.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>css</title>
    <link href="https://derder1.github.io/2022/08/04/css/"/>
    <id>https://derder1.github.io/2022/08/04/css/</id>
    <published>2022-08-04T09:32:34.000Z</published>
    <updated>2022-08-04T09:36:38.086Z</updated>
    
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="css" scheme="https://derder1.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>javaweb</title>
    <link href="https://derder1.github.io/2022/08/01/javaweb/"/>
    <id>https://derder1.github.io/2022/08/01/javaweb/</id>
    <published>2022-08-01T13:16:39.000Z</published>
    <updated>2022-08-08T09:07:58.820Z</updated>
    
    <content type="html"><![CDATA[<p>狂神</p><h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h1><h2 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h2><p>web开发：</p><ul><li>web，网页的意思，<a href="http://www.baidu.com/">www.baidu.com</a></li><li>静态web<ul><li>html，css</li><li>提供给所有人看的数据始终不会发生变化！</li></ul></li><li>动态web<ul><li>淘宝，几乎是所有的网站；</li><li>提供给所有人看的数据始终会发生变化！每个人在不同时间和不同地点看到的信息各不相同！</li><li>技术栈：Servlet&#x2F;JSp,ASP,PHP</li></ul></li></ul><p>在java，动态web资源开发的技术统称javaWeb；</p><h2 id="1-2、web应用程序"><a href="#1-2、web应用程序" class="headerlink" title="1.2、web应用程序"></a>1.2、web应用程序</h2><p>web应用程序：可以提供浏览器访问的程序；</p><ul><li>a.html、b.html ….多个web资源，这些web资源可以被外界访问，对外界提供服务</li><li>你能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上</li><li>URL</li><li>这个统一的web资源会被放在同一个文件夹下，web应用程序 –》tomcat:服务器</li><li>一个web应用由多部分组成（静态web、动态web）<ul><li>html，css，js</li><li>jsp，servlet</li><li>java程序</li><li>jar包</li><li>配置文件（Properties）</li></ul></li></ul><p>web应用程序编写完毕后，弱项提供给外接访问：需要一个服务器来统一管理</p><h2 id="1-3静态web"><a href="#1-3静态web" class="headerlink" title="1.3静态web"></a>1.3静态web</h2><p>request：请求<br>response：响应</p><ul><li><p>*.htm, * .html,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取</p></li><li><p>静态web存在的缺点</p><ul><li>web页面无法动态更新，所有用户看到的都是同一个页面<ul><li>轮播图，点击特效：微动态</li><li>javaScript【实际开发，用的最多】</li><li>VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><h2 id="1-4-动态web"><a href="#1-4-动态web" class="headerlink" title="1.4 动态web"></a>1.4 动态web</h2><p>页面会动态展示：web的页面展示的效果因人而异</p><img src="https://s1.imagehub.cc/images/2022/07/30/image693c6602c85aa0b0.md.png"><p>缺点：</p><ul><li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>，重新发布<ul><li>停机维护</li></ul></li></ul><p>优点：</p><ul><li>web页面可以动态更新，所有用户都可以看到不同的页面</li><li>它可以与数据库交互（数据持久化:商品信息，用户信息）</li></ul><img src="https://s1.imagehub.cc/images/2022/07/30/imagea007c4ad7c8eb2f1.md.png"><h1 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h1><h2 id="2-1技术讲解"><a href="#2-1技术讲解" class="headerlink" title="2.1技术讲解"></a>2.1技术讲解</h2><p>ASP，</p><ul><li>微软：国内最早流行的就是ASP</li><li>在HTML中嵌入了VB的脚本，AP+COM；</li><li>在ASP开发中，基本一个页面都是几千行的业务代码，页面极其乱</li><li>维护成本高</li><li>C#</li><li>IIS</li></ul><p>php</p><ul><li>PHP开发速度很快，功能很强大，跨平台，代码很简单</li><li>无法承载大访问量的情况（局限性）</li></ul><p>JSP&#x2F;Servlet:<br>B&#x2F;S:浏览器和服务器</p><p>C&#x2F;S:客户端和服务器</p><ul><li>sun公司主推的B&#x2F;S架构</li><li>基于java语言的（所有的发送四，或者一些开源的组件，都是用java写的）</li><li>可以承载三高问题带来的影响（高并发，高可用，高性能）</li><li>语法像ASP</li></ul><h2 id="2-2-web服务器"><a href="#2-2-web服务器" class="headerlink" title="2.2 web服务器"></a>2.2 web服务器</h2><p>服务器是一种被动的操作，用来处理用户额一些请求和给用户一些相应信息；</p><p>IIS</p><p>微软的；ASP…，windows中自带</p><p>Tomcat</p><p>面向百度编程：</p><h1 id="3-tomcat-详解"><a href="#3-tomcat-详解" class="headerlink" title="3 tomcat 详解"></a>3 tomcat 详解</h1><h2 id="3-1安装Tomcat"><a href="#3-1安装Tomcat" class="headerlink" title="3.1安装Tomcat"></a>3.1安装Tomcat</h2><p>官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a><br><img src="https://s1.imagehub.cc/images/2022/08/01/image5ebd85ff3baa7188.png"></p><h2 id="3-2tomcat启动和配置"><a href="#3-2tomcat启动和配置" class="headerlink" title="3.2tomcat启动和配置"></a>3.2tomcat启动和配置</h2><img src="https://s1.imagehub.cc/images/2022/08/01/imaged5a37a83c8d977eb.png"><p>启动和关闭<br><img src="https://s1.imagehub.cc/images/2022/08/01/image916ea7b2f19fdfbe.png"></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>可能遇到的问题：</p><ol><li>java环境变量没有配置</li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置</li></ol><p>我的出现闪退是因为环境变量配置的是jdk11，换成jdk8就行了</p><h2 id="3-3配置"><a href="#3-3配置" class="headerlink" title="3.3配置"></a>3.3配置</h2><blockquote><p>E:\apache-tomcat-6.0.37\conf\server.xml文件，服务器核心配置文件</p></blockquote><pre><code>可以配置启动的端口号    - tomcat的默认端口为：8080    - mysql默认端口：3306    - http默认端口：80    - https默认端口：443</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><pre><code>可以配置主机的名称    默认的主机名为：localhost — 127.0.0.1    默认网站应用存放的位置为webapps</code></pre><blockquote><p>hosts配置文件:C:\Windows\System32\drivers\etc\hosts</p></blockquote><h2 id="高难度面试题"><a href="#高难度面试题" class="headerlink" title="高难度面试题"></a>高难度面试题</h2><ol><li>输入一个域名；回车</li><li>检查本机的C:\Windows\System32\drivers\etc\hosts配置文件下以后没有这个域名的映射<ol><li>有：直接返回对应的ip地址，这个地址中，有我们需要放的web程序，可以直接访问</li><li>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到</li></ol></li></ol><h2 id="3-4-发布一个web网站"><a href="#3-4-发布一个web网站" class="headerlink" title="3.4 发布一个web网站"></a>3.4 发布一个web网站</h2><ul><li><p>将自己写的网站，放到服务器（tomcat）中指定的web应用的文件夹（webapps）下，就可以访问了</p><ul><li><p>webapps : tomcat服务器的web目录</p><ul><li>ROOT</li><li>kuangstudy : 网站的目录名<ul><li>WEB-INF<ul><li>classes : java程序</li><li>lib ： web应用所依赖的jar包</li><li>web.xml ： 网站配置文件</li></ul></li><li>index.html ： 默认的首页</li><li>static<ul><li>css<ul><li>style.css</li></ul></li></ul></li><li>js</li><li>img</li></ul></li><li>….</li></ul></li></ul></li></ul><h1 id="4、http详解"><a href="#4、http详解" class="headerlink" title="4、http详解"></a>4、http详解</h1><h2 id="4-1-什么是http"><a href="#4-1-什么是http" class="headerlink" title="4.1 什么是http"></a>4.1 什么是http</h2><p>超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。</p><ul><li>文本：html,字符串…</li><li>超文本：图片，音乐，视频，定位，地图…</li><li>默认端口：80</li></ul><p>HTTPS：</p><ul><li>s代表安全的</li><li>443</li></ul><h2 id="4-2-两个时代"><a href="#4-2-两个时代" class="headerlink" title="4.2 两个时代"></a>4.2 两个时代</h2><ul><li>http1.0<ul><li>HTTP&#x2F;1.0: 客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li></ul></li><li>http2.0<ul><li>HTTP&#x2F;1.1：客户端可以与web服务器连接后，可以获得多个web资源。</li></ul></li></ul><h2 id="4-3-Http请求"><a href="#4-3-Http请求" class="headerlink" title="4.3 Http请求"></a>4.3 Http请求</h2><ul><li>客户端—发请求(Request)—服务器<br>百度：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Request URL: https://www.baidu.com/     请求地址</span><br><span class="line">Request Method: GET                     get方法/post方法</span><br><span class="line">Status Code: 200 OK                     状态码：200</span><br><span class="line">Remote(远程) Address: 14.215.177.38:443</span><br></pre></td></tr></table></figure></li></ul><h3 id="1、-请求行"><a href="#1、-请求行" class="headerlink" title="1、 请求行"></a>1、 请求行</h3><ul><li>请求行中的请求方式：GET</li><li>请求方式：<strong>GET,POST,</strong> HEAD,DELETE,PUT,TRACT…<ul><li>get:请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址拦显示数据内容，不安全，但是高效</li><li>post：请求能都携带的参数没有限制，大小没有限制，不会再在浏览器的URL地址拦显示数据内容，安全，但是不高效。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Accept: text/html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、消息头"><a href="#2、消息头" class="headerlink" title="2、消息头"></a>2、消息头</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Accept: 高速浏览器，它所支持的类型</span><br><span class="line">Accept-Encoding: 支持哪种编码格式  GBK  UTF-8 GB2312  ISO8859-1</span><br><span class="line">Accept-Language: 告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control: 缓存控制</span><br><span class="line">Connection: 告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">Host:主机</span><br></pre></td></tr></table></figure><h2 id="4-4Http响应"><a href="#4-4Http响应" class="headerlink" title="4.4Http响应"></a>4.4Http响应</h2><p>服务器—响应—客户端</p><h3 id="1、响应体"><a href="#1、响应体" class="headerlink" title="1、响应体"></a>1、响应体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Accept: 高速浏览器，它所支持的类型</span><br><span class="line">Accept-Encoding: 支持哪种编码格式  GBK  UTF-8 GB2312  ISO8859-1</span><br><span class="line">Accept-Language: 告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control: 缓存控制</span><br><span class="line">Connection: 告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">Host:主机</span><br><span class="line">Reflush:告诉客户端，多久刷新一次</span><br><span class="line">Location:让网页重新定位</span><br></pre></td></tr></table></figure><h3 id="2、响应状态码"><a href="#2、响应状态码" class="headerlink" title="2、响应状态码"></a>2、响应状态码</h3><p>200: 请求响应成功<br>3××: 请求重定向</p><ul><li>重定向:你重新到我给你的新位置去；<br>4××： 找不到资源</li><li>资源不存在<br>5××：服务器代码错误 500 502：网关错误</li></ul><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><p>当你的浏览器中地址拦输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p><pre><code>1、浏览器会先在本地的host找出对应的域名，浏览器向DNS服务器查找输入的url对应的ip地址2、DNS服务器返回网站的IP地址3、浏览器根据IP地址与目标web服务器在80端口上建立TCP连接4、浏览器获取请求页面的html代码5、浏览器显示窗口内渲染html6、窗口关闭时，浏览器停止与服务器的连接</code></pre><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="为什么学习这个技术"><a href="#为什么学习这个技术" class="headerlink" title="为什么学习这个技术"></a>为什么学习这个技术</h2><ol><li><p>在javaweb开发中，需要使用大量的jar，我们手动去导入</p></li><li><p>如何能够让一个东西自动帮我导入和配置这个jar包</p><p> 由此，Maven诞生了！</p></li></ol><h2 id="5-1Maven项目架构管理工具"><a href="#5-1Maven项目架构管理工具" class="headerlink" title="5.1Maven项目架构管理工具"></a>5.1Maven项目架构管理工具</h2><p>我们目前就是方便导入jar包的</p><p>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反<br>Maven 会规定好你如何去编写我们的java代码，必须按照这个规范来</li></ul><h2 id="5-2下载安装Maven"><a href="#5-2下载安装Maven" class="headerlink" title="5.2下载安装Maven"></a>5.2下载安装Maven</h2><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a><br><img src="https://s1.imagehub.cc/images/2022/08/02/image.png"></p><p>下载完成后，解压即可</p><p>友情建议：电脑上的所有环境都放到一个文件夹下，方便管理</p><h2 id="5-3环境变量配置"><a href="#5-3环境变量配置" class="headerlink" title="5.3环境变量配置"></a>5.3环境变量配置</h2><p>在我们的系统环境变量中</p><p>配置如下配置：</p><ul><li>M2_HOME maven目录下的bin目录</li><li>MAVEN_HOME maven的目录</li><li>在系统的Path中配置%MAVEN_HOME%&#x2F;bin</li></ul><img src="https://s1.imagehub.cc/images/2022/08/02/image37d2311cad7ce366.png"><h2 id="5-4-阿里云镜像"><a href="#5-4-阿里云镜像" class="headerlink" title="5.4 阿里云镜像"></a>5.4 阿里云镜像</h2><ul><li><p>镜像：mirrors</p><ul><li>作用：加速我们的下载</li></ul></li><li><p>国内建议使用阿里云的镜像</p></li><li><p>E:\huanjing\Maven\apache-maven-3.8.6\conf\settings.xml文件夹下配置</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-5、本地仓库"><a href="#5-5、本地仓库" class="headerlink" title="5.5、本地仓库"></a>5.5、本地仓库</h2><p>在本地的仓库，远程仓库<br><strong>建立一个本地仓库：</strong>localRepository</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:\Maven\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6-idea的maven操作"><a href="#6-idea的maven操作" class="headerlink" title="6.idea的maven操作"></a>6.idea的maven操作</h1><h2 id="6-1创建一个maven项目"><a href="#6-1创建一个maven项目" class="headerlink" title="6.1创建一个maven项目"></a>6.1创建一个maven项目</h2><img src="https://s1.imagehub.cc/images/2022/08/02/image191e5063c2b69456.png"><img src="https://s1.imagehub.cc/images/2022/08/02/image00a12bf6fcc18104.png"><img src="https://s1.imagehub.cc/images/2022/08/02/image2974f5270e7368c4.png"><h2 id="创建一个普通的maven项目"><a href="#创建一个普通的maven项目" class="headerlink" title="创建一个普通的maven项目"></a>创建一个普通的maven项目</h2><img src="https://img-blog.csdnimg.cn/img_convert/0fedb4e72099e4546fc55fd95b5c1304.png"><img src="https://img-blog.csdnimg.cn/img_convert/1d781575d69d9332b0bbb3aba58d56e7.png"><img src="https://s1.imagehub.cc/images/2022/08/02/image095cd894e44e87fc.png"><h2 id="在idea配置tomcat"><a href="#在idea配置tomcat" class="headerlink" title="在idea配置tomcat"></a>在idea配置tomcat</h2><img src="https://s1.imagehub.cc/images/2022/08/02/image2e2408a7f81fb83c.png"><img src="https://s1.imagehub.cc/images/2022/08/02/imagea1a314a10df2b52b.png"><img src="https://s1.imagehub.cc/images/2022/08/02/imageb6edeb1d5e242c26.png"><h3 id="解决警告问题"><a href="#解决警告问题" class="headerlink" title="解决警告问题"></a>解决警告问题</h3><img src="https://s1.imagehub.cc/images/2022/08/02/image49d3636d8dc01911.png"><h2 id="如果没有Artifacts选项"><a href="#如果没有Artifacts选项" class="headerlink" title="如果没有Artifacts选项"></a>如果没有Artifacts选项</h2><p>参照该博客：<a href="https://blog.csdn.net/qq_28245905/article/details/121467743">https://blog.csdn.net/qq_28245905/article/details/121467743</a></p><p><strong>必须要的配置</strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字</p><img src="https://s1.imagehub.cc/images/2022/08/02/imaged9a01c20e8a9c878.png"><h2 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h2><img src="https://s1.imagehub.cc/images/2022/08/02/image529f681ba889471f.png"><p>运行成功,访问的是index.jsp中的内容</p><img src="https://s1.imagehub.cc/images/2022/08/02/imageb0780a1770b48415.png"><h2 id="如果出现404参照该博客："><a href="#如果出现404参照该博客：" class="headerlink" title="如果出现404参照该博客："></a>如果出现404参照该博客：</h2><p><a href="https://blog.csdn.net/weixin_45612718/article/details/123373840">https://blog.csdn.net/weixin_45612718/article/details/123373840</a></p><h2 id="发现External-Libraries下没有maven包"><a href="#发现External-Libraries下没有maven包" class="headerlink" title="发现External Libraries下没有maven包"></a>发现External Libraries下没有maven包</h2><p><a href="https://blog.csdn.net/qq164425443/article/details/124790814">https://blog.csdn.net/qq164425443/article/details/124790814</a></p><h2 id="pom-文件"><a href="#pom-文件" class="headerlink" title="pom.文件"></a>pom.文件</h2><p>pom.xml是maven的核心配置文件</p><h1 id="HelloServlet-p8"><a href="#HelloServlet-p8" class="headerlink" title="HelloServlet(p8)"></a>HelloServlet(p8)</h1><h2 id="6-1servlet简介"><a href="#6-1servlet简介" class="headerlink" title="6.1servlet简介"></a>6.1servlet简介</h2><ul><li><p>servlet就是sun公司开发动态web的一门技术</p></li><li><p>Sun在这些API中提供了一个接口：叫做Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤:</p><ul><li><p>编写一个类，实现Servlet接口</p></li><li><p>把开发好的java类部署到web服务器中。</p></li></ul></li></ul><p>把实现了Servlet接口的java程序叫做Servlet</p><h2 id="6-2HelloServlet"><a href="#6-2HelloServlet" class="headerlink" title="6.2HelloServlet"></a>6.2HelloServlet</h2><p><strong>servlet接口sun公司有两个默认的实现类：HttpServlet、GenericServlet</strong></p><ol><li><p>构建普通的maven项目，删掉里面的src目录</p></li><li><p>在此项目中新建一个module(javaweb maven项目)</p></li></ol><blockquote><p>关于maven父子工程理解：</p></blockquote><p>父项目中会有：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaWeb-03-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父项目中的java子项目可以直接使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son extends father</span><br></pre></td></tr></table></figure><p>导入servlet包（父项目的pom.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Maven环境优化</li></ol><p>3.1 修改web.xml为最新的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.2 将maven的结构搭建完整</p><img src="https://img-blog.csdnimg.cn/img_convert/5c37ab13fc42e13c8f600b6140248c7c.png"><ol start="4"><li><p>编写一个servlet</p><ol><li>编写一个普通类</li></ol> <img src="https://img-blog.csdnimg.cn/img_convert/9f5bb106aff21d495bb4f4efa12710f0.png"> 2. 实现Servlet接口，我们这里直接继承HttpServlet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="comment">//由于get或者post知识请求实现的不同方式 ，可以相互调用，业务逻辑都一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();<span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">&quot;Hello,Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>编写Servlet映射</li></ol><p><strong>为什么需要映射：我们写的是java程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要在web服务中注册我们写的servlet，还需要给他一个浏览器能够访问的路径。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        注册Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.liu.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： <url-pattern>&#x2F;hello</url-pattern> 里面是有&#x2F;的</p></blockquote><ol start="6"><li><p>配置Tomcat<br>注意：配置项目发布的路径就可以了</p></li><li><p>测试</p><img src="https://s1.imagehub.cc/images/2022/08/06/image.png"><img src="https://s1.imagehub.cc/images/2022/08/06/image91b12bdae50e1db3.png"></li></ol><h1 id="Servlet原理-p9"><a href="#Servlet原理-p9" class="headerlink" title="Servlet原理(p9)"></a>Servlet原理(p9)</h1><h2 id="Mapping-问题"><a href="#Mapping-问题" class="headerlink" title="Mapping 问题"></a>Mapping 问题</h2><ol><li><p>一个Servlet可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  一个servlet对应一个Mapping:映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--    请求路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一个Servlet可以指定通用映射路径</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>路径可以是hello后面的任意<br><img src="https://s1.imagehub.cc/images/2022/08/06/imageb62024f009c2fb01.png"></p><ol start="4"><li><p>注意下面这样重启服务就不会默认进入到index.jsp页面了(不推荐使用)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>指定一些后缀或者前缀等等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">注意点：*前民不能加项目映射的路径    /hello/*.do   是不可以的</span></span><br><span class="line"><span class="comment">但是/hello/hi.do是可以的</span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>优先级问题</p></li></ol><p>制定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.liu.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    servlet的请求路径--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    localhost:8080/s2/hello/hello--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    404--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.liu.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="ServletContex对象（p10）"><a href="#ServletContex对象（p10）" class="headerlink" title="ServletContex对象（p10）"></a>ServletContex对象（p10）</h1><p>web容器在启动的时候，它会为每个web程序都创建一个对应的servletContext对象，它代表了当前的web应用。</p><ul><li>共享数据<br>  我在这个Servlet保存的数据，可以在另外一个Servlet中拿到</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//this.getInitParameter();   初始化参数</span></span><br><span class="line">        <span class="comment">//this.getServletConfig();   Servlet配置</span></span><br><span class="line">        <span class="comment">//this.getServletContext();  Servlet上下文</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;琴江&quot;</span>;</span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>,username);<span class="comment">//将一个数据保存在了ServletContext中，名字为username，值username</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;名字&quot;</span>+username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.liu.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.liu.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试访问结果：<br>直接访问getc，不会出现名字</p><img src="https://s1.imagehub.cc/images/2022/08/06/imagee6a7df3681dbc011.png"><p>先调用&#x2F;hello</p><img src="https://s1.imagehub.cc/images/2022/08/06/imagece9603d41ef25611.png"><p>再调用&#x2F;getc<br><img src="https://s1.imagehub.cc/images/2022/08/06/imaged2bbf0c24311b17a.png"></p><h1 id="ServletContext应用"><a href="#ServletContext应用" class="headerlink" title="ServletContext应用"></a>ServletContext应用</h1><h2 id="1-获取初始化参数"><a href="#1-获取初始化参数" class="headerlink" title="1.获取初始化参数"></a>1.获取初始化参数</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一些web应用的初始化参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.liu.servlet.ServletDemo03<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/gp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo03</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        resp.getWriter().print(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s1.imagehub.cc/images/2022/08/06/imagecb875ae7625a6005.png"><h2 id="2-请求转发"><a href="#2-请求转发" class="headerlink" title="2.请求转发"></a>2.请求转发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo04</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;进入了Demo04&quot;</span>);</span><br><span class="line">       <span class="comment">// RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;);//转发的请求路径</span></span><br><span class="line">      <span class="comment">//  requestDispatcher.forward(req,resp);//调用forward实现请求转发</span></span><br><span class="line"></span><br><span class="line">        context.getRequestDispatcher(<span class="string">&quot;/gp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-读取资源文件"><a href="#3-读取资源文件" class="headerlink" title="3.读取资源文件"></a>3.读取资源文件</h2><p>Properties</p><ul><li><p>在java目录下新建propertises</p></li><li><p>在resources目录下新建propertises</p></li></ul><p>发现：都被打包到同一个路径下：classes 我们俗称这个路径为classpath</p><p>思路：需要一个文件流</p><blockquote><p>db.properties</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=root</span><br><span class="line">password=123456</span><br></pre></td></tr></table></figure><blockquote><p>properties.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servletDemo05</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(user+<span class="string">&quot;:&quot;</span>+pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>子项目的pom.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources,来防止我们资源导出失败的问题--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sd5<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.liu.servlet.servletDemo05<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sd5<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sd5<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Response下载文件（p12）"><a href="#Response下载文件（p12）" class="headerlink" title="Response下载文件（p12）"></a>Response下载文件（p12）</h1><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><p>web服务器接受到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse;</p><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest</li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><h2 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h2><p><strong>负责向浏览器发送数据的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ServletOutputStream <span class="title function_">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> PrintWriter <span class="title function_">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>负责向浏览器发送响应头的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCharacterEncoding</span><span class="params">(String charset)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContentLength</span><span class="params">(<span class="type">int</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContentLengthLong</span><span class="params">(<span class="type">long</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContentType</span><span class="params">(String type)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDateHeader</span><span class="params">(String name, <span class="type">long</span> date)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDateHeader</span><span class="params">(String name, <span class="type">long</span> date)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeader</span><span class="params">(String name, String value)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHeader</span><span class="params">(String name, String value)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIntHeader</span><span class="params">(String name, <span class="type">int</span> value)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addIntHeader</span><span class="params">(String name, <span class="type">int</span> value)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>响应的状态码(常见)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Status code (200) indicating the request succeeded normally.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SC_OK</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Status code (302) indicating that the resource has temporarily</span></span><br><span class="line"><span class="comment">     * moved to another location, but that future references should</span></span><br><span class="line"><span class="comment">     * still use the original URI to access the resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This definition is being retained for backwards compatibility.</span></span><br><span class="line"><span class="comment">     * SC_FOUND is now the preferred definition.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SC_MOVED_TEMPORARILY</span> <span class="operator">=</span> <span class="number">302</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Status code (404) indicating that the requested resource is not</span></span><br><span class="line"><span class="comment">     * available.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SC_NOT_FOUND</span> <span class="operator">=</span> <span class="number">404</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Status code (500) indicating an error inside the HTTP server</span></span><br><span class="line"><span class="comment">     * which prevented it from fulfilling the request.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SC_INTERNAL_SERVER_ERROR</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Status code (502) indicating that the HTTP server received an</span></span><br><span class="line"><span class="comment">     * invalid response from a server it consulted when acting as a</span></span><br><span class="line"><span class="comment">     * proxy or gateway.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SC_BAD_GATEWAY</span> <span class="operator">=</span> <span class="number">502</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-常见应用"><a href="#2-常见应用" class="headerlink" title="2. 常见应用"></a>2. 常见应用</h2><ol><li>向浏览器输出消息</li><li>下载文件<ol><li>要获取下载文件的路径</li><li>下载的文件名是啥？</li><li>设置想办法让浏览器能够支持下载我们需要的东西</li><li>获取下载文件的输入刘</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutputStream流写入到buffer缓冲区，使用OutputStream将缓冲区中的数据输出到客户端</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;狂神&lt;/p&gt;
&lt;h1 id=&quot;1-基本概念&quot;&gt;&lt;a href=&quot;#1-基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.基本概念&quot;&gt;&lt;/a&gt;1.基本概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-前言&quot;&gt;&lt;a href=&quot;#1-1-前言&quot; class=&quot;header</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="javaweb" scheme="https://derder1.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://derder1.github.io/2022/08/01/MySQL/"/>
    <id>https://derder1.github.io/2022/08/01/MySQL/</id>
    <published>2022-08-01T02:09:25.000Z</published>
    <updated>2022-08-01T07:33:10.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01、什么是数据库，为什么要学习数据库"><a href="#01、什么是数据库，为什么要学习数据库" class="headerlink" title="01、什么是数据库，为什么要学习数据库"></a>01、什么是数据库，为什么要学习数据库</h1><p>javaEE：企业级java开发 Web</p><p>前端（页面：展示，数据！）</p><p>后台（连接点：连接数据库JDBC，连接前端（控制，控制视图跳转，和给前端传递数据））</p><p>数据库（存数据）</p><h2 id="1-为什么学习数据库"><a href="#1-为什么学习数据库" class="headerlink" title="1.为什么学习数据库"></a>1.为什么学习数据库</h2><ol><li>岗位需求</li><li>现在的世界，大数据时代，得数据者得天下</li><li>被迫需求：存数据</li><li>数据库是所有软件体系中最核心的存在  DBA</li></ol><h2 id="1-2-什么是数据库"><a href="#1-2-什么是数据库" class="headerlink" title="1.2 什么是数据库"></a>1.2 什么是数据库</h2><p>数据库（DB,database）</p><p>概念：数据仓库，软件，安装在操作系统(window,linux,mac…)之上。SQL，可以存储大量的数据，500w！</p><p>作用：存储数据，管理数据</p><h2 id="1-3-数据库分类"><a href="#1-3-数据库分类" class="headerlink" title="1.3 数据库分类"></a>1.3 数据库分类</h2><p>关系型数据库 ：</p><ul><li>MySQL, Oracl, SqlSever,DB2,SQLlite</li><li>通过表和表之间，行和列之间的关系进行数据的存储。</li></ul><p>非关系型数据库</p><ul><li>Redis、mongdb</li><li>非关系型数据库，对象存储，通过对象的自身的属性来决定。</li></ul><h2 id="DBMS-数据库管理系统"><a href="#DBMS-数据库管理系统" class="headerlink" title="DBMS(数据库管理系统)"></a>DBMS(数据库管理系统)</h2><ul><li>数据库的管理软件，科学有效的管理我们的数据，维护和获取数据</li><li>MySQL，数据库管理系统</li></ul><h2 id="1-4-MySQL简介"><a href="#1-4-MySQL简介" class="headerlink" title="1.4 MySQL简介"></a>1.4 MySQL简介</h2><pre><code>MySQL是一个**关系型数据库管理系统**前世：瑞典MySQL AB 公司开发今生：属于 Oracle 旗下产品MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。开源的数据库软件体积小、速度快、总体拥有成本低，招人成本比较低，所以人必须会用~中小型网站，或者大型网站，集群！官网：MySQL安装建议：    尽量不要使用exe，注册表    尽可能使用压缩包安装~</code></pre><h1 id="02、基本的命令行操作"><a href="#02、基本的命令行操作" class="headerlink" title="02、基本的命令行操作"></a>02、基本的命令行操作</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p123456 <span class="comment">-- 连接数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>; <span class="comment">-- 修改用户密码</span></span><br><span class="line"></span><br><span class="line">flush privileges; <span class="comment">-- 刷新权限</span></span><br><span class="line"><span class="comment">----------------------------</span></span><br><span class="line"><span class="comment">-- 所有的语句都使用;结尾</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> databases; <span class="comment">-- 查看所有的数据库</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use school; <span class="comment">-- 切换数据库  use 数据库名</span></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables; <span class="comment">-- 显示数据库中所有表的信息</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">describe</span> student; <span class="comment">-- 显示表的详细信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database zyy;  <span class="comment">-- 创建一个数据库（这里过于简洁，后面详细介绍）</span></span><br><span class="line"></span><br><span class="line">exit <span class="comment">-- 退出连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>DDL 数据库定义语言<br>DML 数据库操作语言<br>DQL 数据库查询语言<br>DCL 数据库控制语言</p><p>创建表<br><img src="https://s1.imagehub.cc/images/2022/08/01/image.png"></p><h1 id="03、操作数据库"><a href="#03、操作数据库" class="headerlink" title="03、操作数据库"></a>03、操作数据库</h1><h1 id="4、列的数据类型讲解"><a href="#4、列的数据类型讲解" class="headerlink" title="4、列的数据类型讲解"></a>4、列的数据类型讲解</h1><blockquote><p>数值</p></blockquote><ul><li>tinyint 十分小的数据 1个字节</li><li>smallint 较小的数据 2个字节</li><li>mediumint 中等大小的数据 3个字节</li><li>int 标准的整数 4个字节</li><li>bigint 较大的数据 8个字节</li><li>float 浮点数 4个字节</li><li>double 浮点数 8个字节</li><li>decimal 字符串形式的浮点数 （金融计算的时候，一般是使用decimal）</li></ul><blockquote><p>字符串</p></blockquote><ul><li>char 字符串固定大小的 0~255</li><li>varchar 可变字符串 0~65535 （常量的变量 String）</li><li>tinytext 微型文本 2^8 -1</li><li>text 文件串 2^16 -1 (保存大文本)</li></ul><blockquote><p>时间日期</p></blockquote><ul><li>date YYYY-MM-DD 日期格式</li><li>time HH:mm:ss 时间格式</li><li>datetime YYYY-MM-DD HH:mm:ss 最常用的时间格式</li><li>timestamp 时间戳，1970.1.1到现在的毫秒数！较为常用！</li><li>year 年份表示</li></ul><blockquote><p>null</p></blockquote><ul><li>没有值，未知</li><li>注意：不要使用NULL进行运算，结果为NULL</li></ul><h1 id="05、数据库的字段属性（重点）"><a href="#05、数据库的字段属性（重点）" class="headerlink" title="05、数据库的字段属性（重点）"></a>05、数据库的字段属性（重点）</h1><img src="https://s1.imagehub.cc/images/2022/08/01/imaged1cbba843906b919.png"><pre><code>Unsigned:  无符号的整数  声明了该列不能声明为负数Zerofill:  0填充的  不足的位数，使用0来填充 int(3) 5 — 005自增：  通用理解为自增，自动在上一条记录的基础上+1（默认）  通常用来设计唯一的主键，index，必须是整数类型  可以自定义设计主键自增的起始值和步长非空 null/not null：  not null，如果不给他赋值，就会报错  null，如果不给他赋值，默认就是null默认：  设置默认的值  如果不赋值，就会存默认值</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">每个表，都必须存在以下五个字段  未来做项目用的，表示一个记录存在的意义</span><br><span class="line"></span><br><span class="line">id          主键</span><br><span class="line">version     乐观锁</span><br><span class="line">is_delete   伪删除</span><br><span class="line">gmt_create  创建时间</span><br><span class="line">gmt_update  修改时间</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 目标：创建一个school数据库</span></span><br><span class="line"><span class="comment">-- 创建student学生表，使用sql创建</span></span><br><span class="line"><span class="comment">-- 学号 姓名 性别 出生日期 家庭地址  email</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意点：使用英文()  表的名称和字段尽量使用``括起来</span></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT 自增</span></span><br><span class="line"><span class="comment">-- 字符串使用单引号括起来</span></span><br><span class="line"><span class="comment">-- 所有的语句后面加上英文逗号，最后一个不加</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY主键，一个表一般只有一个唯一的主键</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `birthday` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭地址&#x27;</span>,</span><br><span class="line">  `email` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `表名` (</span><br><span class="line">    `字段名` 列类型[属性]  [索引]  [注释],</span><br><span class="line">    `字段名` 列类型[属性]  [索引]  [注释],</span><br><span class="line">    `字段名` 列类型[属性]  [索引]  [注释],</span><br><span class="line">    ...</span><br><span class="line">)[表类型][字符集设置][注释]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01、什么是数据库，为什么要学习数据库&quot;&gt;&lt;a href=&quot;#01、什么是数据库，为什么要学习数据库&quot; class=&quot;headerlink&quot; title=&quot;01、什么是数据库，为什么要学习数据库&quot;&gt;&lt;/a&gt;01、什么是数据库，为什么要学习数据库&lt;/h1&gt;&lt;p&gt;ja</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="MySQL" scheme="https://derder1.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>html</title>
    <link href="https://derder1.github.io/2022/07/31/html/"/>
    <id>https://derder1.github.io/2022/07/31/html/</id>
    <published>2022-07-31T01:48:09.000Z</published>
    <updated>2022-08-01T02:08:37.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--DOCTYPE：告诉浏览器，我们要使用什么规范--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    meta描述性标签，用来描述我们网站的一些信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;狂神说java，西部开源&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;可以学习&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个网页 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1基本标签"><a href="#1基本标签" class="headerlink" title="1基本标签"></a>1基本标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h7</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h7</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line">空<span class="symbol">&amp;nbsp;</span>格</span><br><span class="line">大于号：<span class="symbol">&amp;pt;</span></span><br><span class="line">小于号：<span class="symbol">&amp;it;</span></span><br><span class="line">版权符号：<span class="symbol">&amp;copy;</span></span><br><span class="line"><span class="comment">&lt;!-- ../上一级目录   titlt：悬停显示文字   src和alt必填--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片找不到的替换文字&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- target=&quot;_black&quot;：在新标签打开 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;-black&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 图像连接 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片找不到的替换文字&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:2403048893@qq.com&quot;</span>&gt;</span>点击联系我&lt;/a</span><br></pre></td></tr></table></figure><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 无序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定义列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>语言<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/a88905eff80a4b0693f3af10179364dd.png"><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><ul><li>行 tr</li><li>列 td</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 占两列  clospan跨列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 占两行 rowspon跨行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/b95ac78a2069485bae646cac26f2d683.png"><h3 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h3><p>需要 controls才有控制</p><p>自动播放 autoplay  edge浏览器不会自动播放</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;../resources/video/9.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 音频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://s1.imagehub.cc/images/2022/07/31/image.png"><h3 id="iframe内联框架"><a href="#iframe内联框架" class="headerlink" title="iframe内联框架"></a>iframe内联框架</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.bilibili.com/video/BV1E7411k7Qy?from=search&amp;seid=2534027070307899712&amp;spm_id_from=333.337.0.0&amp;vd_source=0c82d50ac822c5e1f490f06791c748ad&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://s1.imagehub.cc/images/2022/07/31/imageb6c16aa053de048e.md.png"><br><br><h3 id="表单post和get提交"><a href="#表单post和get提交" class="headerlink" title="表单post和get提交"></a>表单post和get提交</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo02.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 名字： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用get方式提交会在url中看到我们提交的信息，不安全，高效</p><img src="https://s1.imagehub.cc/images/2022/07/31/image8b098394a3f8df2b.png"><p>post：比较安全，传输大文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo02.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本框和单选框"><a href="#文本框和单选框" class="headerlink" title="文本框和单选框"></a>文本框和单选框</h3><p>文本输入框：input type&#x3D;”text”</p><ul><li>value&#x3D;”刘” 默认初始值</li><li>maxlength&#x3D;”8” 最长能写几个字符</li><li>size&#x3D;”30”  文本框长度 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 名字： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;刘&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;8&quot;</span> <span class="attr">size</span>=<span class="string">&quot;30&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://s1.imagehub.cc/images/2022/07/31/image68f95d8519f62799.png"></li></ul><p>单选表单</p><ul><li>value：单选框的值</li><li>name： 表示组，单选框一组只能选一个<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><input type="radio" value="boy" name="sex">男<input type="radio" value="girl" name="sex">女</p></li></ul><p>name：一个为sex一个为sex2不一样的组两个都可以选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex2&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><input type="radio" value="boy" name="sex">男<input type="radio" value="girl" name="sex2">女</p><h3 id="多选框和按钮"><a href="#多选框和按钮" class="headerlink" title="多选框和按钮"></a>多选框和按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--多选框 input type=&quot;checkbox&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>代码</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;chat&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>聊天</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>游戏</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按钮 input type=&quot;button&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按钮 input type=&quot;image&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        按钮：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span> =<span class="string">&quot;btnl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击变长&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 图片按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://s1.imagehub.cc/images/2022/07/31/image78eae6286f63fcbb.png"><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>下拉框：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;列表名称&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;选项的值&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;选项的值&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;选项的值&quot;</span> <span class="attr">selected</span>&gt;</span>瑞士<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="comment">&lt;!-- selected默认--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;选项的值&quot;</span>&gt;</span>印度<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://s1.imagehub.cc/images/2022/07/31/imagedfadf01b103bff7b.png"><p>文本域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;20&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://s1.imagehub.cc/images/2022/07/31/imagec1a2149eff1aec4d.png"><p>文件域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://s1.imagehub.cc/images/2022/07/31/image4df0482cae2e63c0.png"><h3 id="表单初级验证"><a href="#表单初级验证" class="headerlink" title="表单初级验证"></a>表单初级验证</h3><p>常用方式</p><ul><li>placeholder  提示信息</li><li>required  非空判断</li><li>pattern  正则表达式</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; title=&quot;标签&quot;&gt;&lt;/a&gt;标签&lt;/h1&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="html" scheme="https://derder1.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>java面试题</title>
    <link href="https://derder1.github.io/2022/07/29/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://derder1.github.io/2022/07/29/%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-07-29T14:17:59.000Z</published>
    <updated>2022-08-03T01:32:09.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JDK和JRE有什么区别"><a href="#1-JDK和JRE有什么区别" class="headerlink" title="1. JDK和JRE有什么区别"></a>1. JDK和JRE有什么区别</h1><ul><li>JDk: Java Development Kit 的简称，java开发工具包，提供了java的开发环境和运行环境</li><li>JRE：Java Runtime Environment 的简称，java运行环境，为java的运行提供了所需环境。wa</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-JDK和JRE有什么区别&quot;&gt;&lt;a href=&quot;#1-JDK和JRE有什么区别&quot; class=&quot;headerlink&quot; title=&quot;1. JDK和JRE有什么区别&quot;&gt;&lt;/a&gt;1. JDK和JRE有什么区别&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;JDk: Java Deve</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="面试题" scheme="https://derder1.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>mybatis</title>
    <link href="https://derder1.github.io/2022/07/28/mybatis/"/>
    <id>https://derder1.github.io/2022/07/28/mybatis/</id>
    <published>2022-07-28T08:31:19.000Z</published>
    <updated>2022-07-29T03:49:14.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="尚硅谷mybatis"><a href="#尚硅谷mybatis" class="headerlink" title="尚硅谷mybatis"></a>尚硅谷mybatis</h1><h2 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h2><p>20版本的idea和3.8版本的maven不能兼容，要换成低版本的</p><p>在pom.xml里面配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="MyBatis的核心配置文件"><a href="#MyBatis的核心配置文件" class="headerlink" title="MyBatis的核心配置文件"></a>MyBatis的核心配置文件</h3><p>习惯命名为：mybatis-config.xml，放置在src&#x2F;main&#x2F;resources下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;liu0159..&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h3><p>在mybatis数据库下创建t_user表</p><p>User类属性要和t_user表的字段相对应<br><img src="https://www.helloimg.com/images/2022/07/29/ZwQiDP.png"></p><blockquote><p>User类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mabatis.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> weijiangquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/4/19 -17:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String  username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, Integer age, String sex, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://www.helloimg.com/images/2022/07/29/ZwQSHM.png"><h3 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h3><p>在resources下创建mappers文件夹，下创建UserMapper.xml<br><img src="https://www.helloimg.com/images/2022/07/29/ZwQb4n.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.liu.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   int insertUser();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into t_uer values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应关系</p><p><strong>表–实体类–mapper接口–映射文件</strong></p><blockquote><p>引入映射文件<br><img src="https://www.helloimg.com/images/2022/07/29/ZwQD9b.png"></p></blockquote><h3 id="MyBatis框架之测试添加功能"><a href="#MyBatis框架之测试添加功能" class="headerlink" title="MyBatis框架之测试添加功能"></a>MyBatis框架之测试添加功能</h3><p>创建mybatis测试文件<br><img src="https://www.helloimg.com/images/2022/07/29/Zwp7Q6.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.mybatis.test;</span><br><span class="line"><span class="keyword">import</span> com.liu.mybatis.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatis</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyBatis</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取sqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取SqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mapper接口对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试功能</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertUser();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果</p></blockquote><img src="https://www.helloimg.com/images/2022/07/29/ZwpDyn.png"><blockquote><p>sqlyog</p></blockquote><img src="https://www.helloimg.com/images/2022/07/29/Zwp8cz.png"><p>出现的错误：</p><ol><li>UserMapper.xml文件下的表名写错了。导致出错</li><li>第二个错误<img src="https://www.helloimg.com/images/2022/07/29/Zwp6mR.png"></li></ol><p>在Mybatis-config.xml文件下的url：  </p><blockquote><p>错误的</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>正确的</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="搭建MyBatis框架之优化功能-p12"><a href="#搭建MyBatis框架之优化功能-p12" class="headerlink" title="搭建MyBatis框架之优化功能 (p12)"></a>搭建MyBatis框架之优化功能 (p12)</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;尚硅谷mybatis&quot;&gt;&lt;a href=&quot;#尚硅谷mybatis&quot; class=&quot;headerlink&quot; title=&quot;尚硅谷mybatis&quot;&gt;&lt;/a&gt;尚硅谷mybatis&lt;/h1&gt;&lt;h2 id=&quot;创建maven工程&quot;&gt;&lt;a href=&quot;#创建maven工程&quot; c</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="mybatis" scheme="https://derder1.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>韩顺平章节题</title>
    <link href="https://derder1.github.io/2022/07/28/%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://derder1.github.io/2022/07/28/%E7%BB%83%E4%B9%A0%E9%A2%98/</id>
    <published>2022-07-28T07:06:01.000Z</published>
    <updated>2022-08-04T12:17:08.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDK，JRE-JVM的关系"><a href="#JDK，JRE-JVM的关系" class="headerlink" title="JDK，JRE,JVM的关系"></a>JDK，JRE,JVM的关系</h2><ol><li>JDK &#x3D; JRE + java开发工具</li><li>JRE &#x3D; JVM + 核心类库</li></ol><h2 id="10-5-3-x3D"><a href="#10-5-3-x3D" class="headerlink" title="-10.5%3&#x3D;"></a>-10.5%3&#x3D;</h2><ul><li>a%b 当a是小数时，公式 &#x3D; a-(int)a&#x2F;b*b </li><li>-10.5-(-10)&#x2F;3*3&#x3D;-1.5</li></ul><p>&#x2F;&#x2F;有小数运算是近似值。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="面向对象练习题"><a href="#面向对象练习题" class="headerlink" title="面向对象练习题"></a>面向对象练习题</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>定义一个Person类{name,age,job},初始化Person对象数组，有3个person对象，并按照age从大到小进行排序，提示，使用冒泡排序。HomeWork01.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.liu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person[]  persons = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">3</span>];</span><br><span class="line">        persons[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>,<span class="number">30</span>,<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">        persons[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span>,<span class="number">20</span>,<span class="string">&quot;大数据&quot;</span>);</span><br><span class="line">        persons[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;mary&quot;</span>,<span class="number">50</span>,<span class="string">&quot;人工智能&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;persons.length;i++)&#123;</span><br><span class="line">            System.out.println(persons[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//临时变量，用与交换</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;persons.length-<span class="number">1</span>;i++)&#123;<span class="comment">//外层循环</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;persons.length-<span class="number">1</span>-i;j++)&#123;<span class="comment">//内层循环</span></span><br><span class="line">                <span class="comment">//按照age从大到小排序，</span></span><br><span class="line">                <span class="comment">//从小到大排序,只需要if(persons[i].getAge()&gt; persons[i+1].getAge()),改成大于号就行</span></span><br><span class="line">                <span class="comment">//按名字长度排序 ，if(persons[i].getAge().length()&lt; persons[i+1].getAge().length())&#123;</span></span><br><span class="line">                <span class="keyword">if</span>(persons[i].getAge()&lt; persons[i+<span class="number">1</span>].getAge())&#123;<span class="comment">//</span></span><br><span class="line">                    temp = persons[i];</span><br><span class="line">                    persons[i] = persons[i+<span class="number">1</span>];</span><br><span class="line">                    persons[i+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的结果&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;persons.length;i++)&#123;</span><br><span class="line">            System.out.println(persons[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age,String job)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJob</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJob</span><span class="params">(String job)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-访问修饰符和各自的访问权限"><a href="#2-访问修饰符和各自的访问权限" class="headerlink" title="2.访问修饰符和各自的访问权限"></a>2.访问修饰符和各自的访问权限</h2><pre><code>修饰符        所在类    同一个包内其他类其他包内子类其他包内非子类public            √         √                √            √protected        √         √                √            ×默认(default)    √         √                ×           ×private            √         ×                ×            ×</code></pre><ol><li><p>private:私有的，对访问权限限制最窄的修饰符。被private修饰的属性以及方法只能被该类的对象访问。它的子类也不可以访问，更不支持跨包访问。</p></li><li><p>protected:及保护访问权限，是介于public和private之间的一种访问修饰。被protected修饰的属性及方法只能被类本身的方法和子类访问。（子类在不同的包中也可以访问）</p></li><li><p>public:及共有的，是访问权限限制最宽的修饰符。被public修饰的类、属性、及方法不仅可以跨类访问，而且可以跨包访问。</p></li><li><p>default:及默认的，不加任何访问修饰符。常被叫做“默认访问权限”或者“包访问权限”。无任修饰符时，只支持在同一个包中进行访问。</p></li></ol><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>题目<img src="https://www.helloimg.com/images/2022/07/28/ZwwtWm.png"></p><p>只写了一个教授其他类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Professor</span> <span class="variable">professor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Professor</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">30</span>,<span class="string">&quot;高级职称&quot;</span>,<span class="number">3000</span>,<span class="number">1.3</span>);</span><br><span class="line">        professor.introduce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String post;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> grade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age, String post, <span class="type">double</span> salary, <span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.post = post;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> post;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPost</span><span class="params">(String post)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.post = post;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getGrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGrade</span><span class="params">(<span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span>+name+<span class="string">&quot; age: &quot;</span>+age +<span class="string">&quot; post: &quot;</span>+post+ <span class="string">&quot; salary: &quot;</span>+salary+<span class="string">&quot; grade &quot;</span>+ grade );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教授类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Professor</span> <span class="keyword">extends</span> <span class="title class_">Teacher</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Professor</span><span class="params">(String name, <span class="type">int</span> age, String post, <span class="type">double</span> salary, <span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age, post, salary, grade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是教授的信息 &quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.introduce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><img src="https://www.helloimg.com/images/2022/07/29/Zw7D9z.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;刘备&quot;</span>,<span class="number">100</span>,<span class="number">20</span>,<span class="number">1.2</span>);</span><br><span class="line">    <span class="comment">//设置奖金</span></span><br><span class="line">        manager.setBouns(<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">//打印经理的工资</span></span><br><span class="line">        manager.prinSal();</span><br><span class="line"></span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">50</span>,<span class="number">10</span>,<span class="number">1.0</span>);</span><br><span class="line">        worker.prinSal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//员工属性：姓名，单日工资，工作天数</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> daySal;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> workDays;</span><br><span class="line">    <span class="comment">//分析出还有属性等级</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> grade;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法[构造器，getter，setter]</span></span><br><span class="line">    <span class="comment">//打印工资方法</span></span><br><span class="line">    <span class="comment">//方法 void prinSal()&#123;&#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prinSal</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;工资等于&quot;</span>+ workDays*daySal*grade);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> daySal, <span class="type">int</span> workDays, <span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.daySal = daySal;</span><br><span class="line">        <span class="built_in">this</span>.workDays = workDays;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDaySal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> daySal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDaySal</span><span class="params">(<span class="type">double</span> daySal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.daySal = daySal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWorkDays</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workDays;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkDays</span><span class="params">(<span class="type">int</span> workDays)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.workDays = workDays;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getGrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGrade</span><span class="params">(<span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//经理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="comment">//特有属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> bouns;</span><br><span class="line">    <span class="comment">//创建manage对象时，奖金多少并不确定</span></span><br><span class="line">    <span class="comment">//可以通过setBonus</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name, <span class="type">double</span> daySal, <span class="type">int</span> workDays, <span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, daySal, workDays, grade);</span><br><span class="line">        <span class="built_in">this</span>.bouns = bouns;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法：重写printsal方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prinSal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//因为经理计算方式和Employee不一样</span></span><br><span class="line">        System.out.println(<span class="string">&quot;经理：&quot;</span>+ getName()+<span class="string">&quot; 工资是 &quot;</span>+(bouns+getDaySal()*getGrade()*getWorkDays()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBouns</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bouns;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBouns</span><span class="params">(<span class="type">double</span> bouns)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bouns = bouns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="comment">//分析普通员工没有特有属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(String name, <span class="type">double</span> daySal, <span class="type">int</span> workDays, <span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, daySal, workDays, grade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通员工和Employee输出工资情况一样，所以直接调用父类的printSal</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prinSal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;普通员工：&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.prinSal();<span class="comment">//调用父类方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2><p>没学</p><h2 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h2><img src="https://www.helloimg.com/images/2022/07/29/Zw7hET.png"><ul><li>黄色的是答案</li><li>super可以调用父类的父类，super.g1()</li><li>Son类this.name;调用的是本类的，本类有的不可以调用父类，及父类的父类的</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JDK，JRE-JVM的关系&quot;&gt;&lt;a href=&quot;#JDK，JRE-JVM的关系&quot; class=&quot;headerlink&quot; title=&quot;JDK，JRE,JVM的关系&quot;&gt;&lt;/a&gt;JDK，JRE,JVM的关系&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;JDK &amp;#x3D; JRE +</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="java练习题" scheme="https://derder1.github.io/tags/java%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="https://derder1.github.io/2022/07/27/%E9%9B%86%E5%90%88/"/>
    <id>https://derder1.github.io/2022/07/27/%E9%9B%86%E5%90%88/</id>
    <published>2022-07-27T02:08:55.000Z</published>
    <updated>2022-08-08T01:58:05.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>集合的好处</p><ol><li>可以动态保存任意多个对象  ,使用比较方便</li><li>提供了一系列方便的操作对象的方法:add、remove、set,get等</li><li>使用集合添加,删除新元素的示意代码-简洁了</li></ol><h1 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h1><p>Collection接口继承了Iterable接口<br><img src="https://www.helloimg.com/images/2022/07/27/ZwlgdQ.png"></p><p>Map接口</p><img src="https://www.helloimg.com/images/2022/07/27/ZwlkYt.png"><pre><code>集合主要有2组，一组是单列集合（集合里面放的是的那个的对象），另一组是双列集合，我那个网是键值对形式的Collection接口有List和Set这两个主要的接口，他们的实现类都是单列集合Map接口的实现子类是双列集合，存放key和value这样的数据</code></pre><h2 id="单列集合和双列集合"><a href="#单列集合和双列集合" class="headerlink" title="单列集合和双列集合"></a>单列集合和双列集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单列集合</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">arrayList.add(<span class="string">&quot;san&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;si&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//双列集合</span></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">hashMap.put(<span class="string">&quot;NO1&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">hashMap.put(<span class="string">&quot;NO2&quot;</span>,<span class="string">&quot;上海&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Collection接口和常用方法"><a href="#Collection接口和常用方法" class="headerlink" title="Collection接口和常用方法"></a>Collection接口和常用方法</h2><p>Collection接口继承了Iterable接口</p><ol><li>collection实现子类可以存放多个元素，每个元素可以是Object</li><li>有些Coolection的实现类可以存放重复的元素，有些不可以</li><li>有些Collectiond的实现类，存放数据是有序的（List），有些是无序的(Set)</li><li>Collection接口没有直接的实现子类，是通过子接口Set和List来实现的</li></ol><img src="https://www.helloimg.com/images/2022/07/27/ZwMJfq.png"><blockquote><p>代码案例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.collection;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">collection_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list.add(<span class="number">10</span>);<span class="comment">//</span></span><br><span class="line">        list.add(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);<span class="comment">//list=[jack, 10, true]</span></span><br><span class="line"></span><br><span class="line">        list.remove(<span class="number">0</span>);<span class="comment">//删除第一个元素</span></span><br><span class="line"></span><br><span class="line">        list.remove(<span class="string">&quot;jack&quot;</span>);<span class="comment">//指定删除</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//contains  ：查找元素是否存在</span></span><br><span class="line"></span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;jack&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//判断是否为空</span></span><br><span class="line">        System.out.println(list.isEmpty());<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//clear清空</span></span><br><span class="line">        list.clear();</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//addAll:添加多个元素</span></span><br><span class="line">        list2.add(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.addAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);<span class="comment">//list=[红楼梦, 三国演义]</span></span><br><span class="line">        System.out.println(list.containsAll(list2));<span class="comment">//true</span></span><br><span class="line">        list.add(<span class="string">&quot;聊斋&quot;</span>);</span><br><span class="line">        list.removeAll(list2);<span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);<span class="comment">//list=[聊斋]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Collection迭代器遍历"><a href="#Collection迭代器遍历" class="headerlink" title="Collection迭代器遍历"></a>Collection迭代器遍历</h2><pre><code>Collection接口遍历元素的方式：1. 迭代器Iterator    Iterator对象称为迭代器，主要用于遍历Collection集合中的元素    所有实现了Collection接口的集合类都有一个Iterator()方法，用以返回一个实现了Iterator接口的对象，即可以返回一个迭代器    Iterator仅用于遍历集合，Iterator本身并不存储对象</code></pre><img src="https://www.helloimg.com/images/2022/07/27/ZwMugT.png"><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>快捷键快速生成while &#x3D;&gt; itit<br>显示所有快捷键的快捷键 ctrl+j</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快捷键快速生成while =&gt; itit</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>顺序</p><ol><li>先得到col对应的迭代器</li><li>使用while循环遍历</li><li>当退出while循环后 , 这时iterator迭代器，指向最后的元素</li><li>如果希望再次遍历，需要重置我们的迭代器</li></ol><blockquote><p>案例代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.SupportedSourceVersion;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionIterator</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;罗贯中&quot;</span>, <span class="number">10.1</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;小李飞刀&quot;</span>, <span class="string">&quot;古龙&quot;</span>, <span class="number">5.1</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;曹雪芹&quot;</span>, <span class="number">34.6</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(&quot;col&quot;+col );</span></span><br><span class="line">        <span class="comment">//1.先得到col对应的迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> col.iterator();</span><br><span class="line">        <span class="comment">//2.使用while循环遍历</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;obj&quot;</span>+obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//快捷键快速生成while =&gt; itit</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//显示所有快捷键的快捷键 ctrl+j</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 当退出while循环后 , 这时iterator迭代器，指向最后的元素</span></span><br><span class="line">        <span class="comment">//   iterator.next();//NoSuchElementException</span></span><br><span class="line">        <span class="comment">//4. 如果希望再次遍历，需要重置我们的迭代器</span></span><br><span class="line">        iterator = col.iterator();</span><br><span class="line">        System.out.println(<span class="string">&quot;第二次遍历&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;obj=&quot;</span>+obj);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, String author, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, author=&#x27;&quot;</span> + author + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*objBook&#123;name=&#x27;三国演义&#x27;, author=&#x27;罗贯中&#x27;, price=10.1&#125;</span></span><br><span class="line"><span class="comment">objBook&#123;name=&#x27;小李飞刀&#x27;, author=&#x27;古龙&#x27;, price=5.1&#125;</span></span><br><span class="line"><span class="comment">objBook&#123;name=&#x27;红楼梦&#x27;, author=&#x27;曹雪芹&#x27;, price=34.6&#125;</span></span><br><span class="line"><span class="comment">第二次遍历</span></span><br><span class="line"><span class="comment">obj=Book&#123;name=&#x27;三国演义&#x27;, author=&#x27;罗贯中&#x27;, price=10.1&#125;</span></span><br><span class="line"><span class="comment">obj=Book&#123;name=&#x27;小李飞刀&#x27;, author=&#x27;古龙&#x27;, price=5.1&#125;</span></span><br><span class="line"><span class="comment">obj=Book&#123;name=&#x27;红楼梦&#x27;, author=&#x27;曹雪芹&#x27;, price=34.6&#125;*/</span></span><br></pre></td></tr></table></figure><h3 id="for循环增强"><a href="#for循环增强" class="headerlink" title="for循环增强"></a>for循环增强</h3><p>代码解读</p><ol><li>使用增强for, 在Collection集合</li><li>增强for， 底层仍然是迭代器</li><li>增强for可以理解成就是简化版本的 迭代器遍历</li><li>快捷键方式 I</li></ol><p>增强for的底层仍然是迭代器，在for循环端点debug就可以看到了，会调用Iterator,增强for可以看成简易版的迭代器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionFor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;罗贯中&quot;</span>, <span class="number">10.1</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;小李飞刀&quot;</span>, <span class="string">&quot;古龙&quot;</span>, <span class="number">5.1</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;曹雪芹&quot;</span>, <span class="number">34.6</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增强for</span></span><br><span class="line">        <span class="keyword">for</span>(Object book :col)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;book&quot;</span>+book);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增强for也可以在数组中使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">bookBook&#123;name=&#x27;三国演义&#x27;, author=&#x27;罗贯中&#x27;, price=10.1&#125;</span></span><br><span class="line"><span class="comment">bookBook&#123;name=&#x27;小李飞刀&#x27;, author=&#x27;古龙&#x27;, price=5.1&#125;</span></span><br><span class="line"><span class="comment">bookBook&#123;name=&#x27;红楼梦&#x27;, author=&#x27;曹雪芹&#x27;, price=34.6&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="List接口方法"><a href="#List接口方法" class="headerlink" title="List接口方法"></a>List接口方法</h2><blockquote><p>List集合类中元素有序（添加顺序和取出顺序一致、且可重复）</p></blockquote><img src="https://www.helloimg.com/images/2022/07/27/Zw2Skn.png"><blockquote><p>代码案例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;贾宝玉&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(<span class="number">1</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);<span class="comment">//list=[张三丰, 李四, 贾宝玉]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list2.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        <span class="comment">//boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line">        list.addAll(<span class="number">1</span>,list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);<span class="comment">//list=[张三丰, [jack, tom], 李四, 贾宝玉]</span></span><br><span class="line"></span><br><span class="line">        System.out.println(list.indexOf(<span class="string">&quot;tom&quot;</span>));<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line">        <span class="comment">//int indexOf(Object obj):返回obj在集合中首次出现的位置</span></span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="string">&quot;李四&quot;</span>));<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//移除指定index位置的元素，并返回此元素</span></span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list&quot;</span>+list);<span class="comment">//list[jack, tom, 李四, 贾宝玉, 李四]</span></span><br><span class="line">        <span class="comment">//Object set(int index, Object ele):设置指定index位置的元素为ele , 相当于是替换.</span></span><br><span class="line">        list.set(<span class="number">1</span>,<span class="string">&quot;马丽&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line">        <span class="comment">//返回从fromIndex到toIndex位置的子集合</span></span><br><span class="line">        <span class="comment">// 注意返回的子集合 fromIndex &lt;= subList &lt; toIndex</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">returnlist</span> <span class="operator">=</span> list.subList(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;returnlist&quot;</span>+returnlist);<span class="comment">//returnlist[jack, 马丽]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="List接口练习"><a href="#List接口练习" class="headerlink" title="List接口练习"></a>List接口练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*添加10个以上的元素(比如String &quot;hello&quot; )，在2号位插入一个元素&quot;韩顺平教育&quot;，</span></span><br><span class="line"><span class="comment">        获得第5个元素，删除第6个元素，修改第7个元素，在使用迭代器遍历集合，</span></span><br><span class="line"><span class="comment">        要求:使用List的实现类ArrayList完成。*/</span></span><br><span class="line"><span class="keyword">package</span> com.liu.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">12</span> ; i++) &#123;</span><br><span class="line">            list.add(<span class="string">&quot;hello&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line"></span><br><span class="line">        list.add(<span class="number">1</span>,<span class="string">&quot;liu&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第五个元素&quot;</span>+list.get(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        list.remove(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line"></span><br><span class="line">        list.set(<span class="number">6</span>,<span class="string">&quot;asdad&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器遍历</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;next=&quot;</span>+next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for</span></span><br><span class="line">        <span class="keyword">for</span> (Object o :list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;o=&quot;</span>+o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="List-三种遍历方式"><a href="#List-三种遍历方式" class="headerlink" title="List 三种遍历方式"></a>List 三种遍历方式</h2><p>迭代器，增强for 普通for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListFor</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List 接口的实现子类 Vector LinkedList</span></span><br><span class="line">        <span class="comment">//List list = new ArrayList();</span></span><br><span class="line">        <span class="comment">//List list = new Vector();</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;鱼香肉丝&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;北京烤鸭子&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="comment">//1. 迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====增强for=====&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 增强for</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;o=&quot;</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====普通for====&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 使用普通for</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象=&quot;</span> + list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="LIst-排序练习"><a href="#LIst-排序练习" class="headerlink" title="LIst 排序练习"></a>LIst 排序练习</h2><p>按价格排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hspedu.list_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListExercise02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List list = new ArrayList();</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        <span class="comment">//List list = new Vector();</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;曹雪芹&quot;</span>, <span class="number">100</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;吴承恩&quot;</span>, <span class="number">10</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;水浒传&quot;</span>, <span class="string">&quot;施耐庵&quot;</span>, <span class="number">19</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;三国&quot;</span>, <span class="string">&quot;罗贯中&quot;</span>, <span class="number">80</span>));</span><br><span class="line">        <span class="comment">//list.add(new Book(&quot;西游记&quot;, &quot;吴承恩&quot;, 10));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何对集合进行排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line">        sort(list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==排序后==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="comment">//价格要求是从小到大</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List list)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">listSize</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listSize - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; listSize - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//取出对象Book</span></span><br><span class="line">                <span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> (Book) list.get(j);</span><br><span class="line">                <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> (Book) list.get(j + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (book1.getPrice() &gt; book2.getPrice()) &#123;<span class="comment">//交换</span></span><br><span class="line">                    list.set(j, book2);</span><br><span class="line">                    list.set(j + <span class="number">1</span>, book1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ArrayList注意事项"><a href="#ArrayList注意事项" class="headerlink" title="ArrayList注意事项"></a>ArrayList注意事项</h2><ul><li>ArrayList可以存放空元素 arrayList.add(null);且可以存放多个空值，底层是用数组实现的，线程不安全，效率高</li><li>多线程情况下可以使用vector,vector是线程安全的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ArrayList 是线程不安全的, 可以看源码 没有 synchronized</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public boolean add(E e) &#123;</span></span><br><span class="line"><span class="comment">                ensureCapacityInternal(size + 1);  // Increments modCount!!</span></span><br><span class="line"><span class="comment">                elementData[size++] = e;</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        arrayList.add(<span class="literal">null</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="literal">null</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;hsp&quot;</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ArrayList底层结构和源码分析-重点-难点"><a href="#ArrayList底层结构和源码分析-重点-难点" class="headerlink" title="ArrayList底层结构和源码分析(重点,难点)"></a>ArrayList底层结构和源码分析(重点,难点)</h2><img src="https://www.helloimg.com/images/2022/07/30/ZwURhc.png"><blockquote><p>面试题；<strong>对象在序列化的时候，transient修饰的属性不会被序列化</strong></p></blockquote><p>ArrayList中维护了一个Object类型的数组elementData. transient Object[] elementData;(Object类型的数组说明什么类型都可以放)</p><p>-当添加元素时:先判断是否需要扩容,如果需要扩容，则调用grow方法，否则直接添加元素到合适位置</p><p>4)当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第1次添加，则扩容elementData为10，如需要再次扩容，则扩容elementData为1.5倍。&#x2F;&#x2F;10-&gt;15-&gt;22-&gt;33….</p><p>5)如果使用的是指定容量capacity的构造器，则初始elementData容量为capacity，如果需要扩容，则直接扩容elementData为1.5倍。&#x2F;&#x2F;假设指定为8-&gt;12-&gt;18</p><h2 id="ArrayList底层源码1（p13）"><a href="#ArrayList底层源码1（p13）" class="headerlink" title="ArrayList底层源码1（p13）"></a>ArrayList底层源码1（p13）</h2><p>Debug进行调试如果进入不了源码需要设置</p><p>点击​​File-&gt;Settings-&gt; Build, Execution, Deployment -&gt;Debugger-&gt;Stepping​​</p><p>把​​Do not step into the classes​​​下的​​java​​​.*, ​​javax.*​​取消勾选，然后保存即可。</p><img src="https://www.helloimg.com/images/2022/07/30/Zwgtym.png"><img src="https://s1.imagehub.cc/images/2022/07/30/image5e60345beb868419.md.png"><h2 id="p14"><a href="#p14" class="headerlink" title="p14"></a>p14</h2><p>无参数</p><p>有参数</p><h2 id="Vector注意事项"><a href="#Vector注意事项" class="headerlink" title="Vector注意事项"></a>Vector注意事项</h2><img src="https://www.helloimg.com/images/2022/07/30/ZwV02q.png"><br><h3 id="Vector和Arraylist的比较"><a href="#Vector和Arraylist的比较" class="headerlink" title="Vector和Arraylist的比较"></a>Vector和Arraylist的比较</h3><img src="https://s1.imagehub.cc/images/2022/08/03/imagebf1d5eddcad04434.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.list_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vector_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//无参构造器</span></span><br><span class="line">        <span class="comment">//有参数的构造</span></span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            vector.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector.add(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;vector=&quot;</span> + vector);</span><br><span class="line">        <span class="comment">//老韩解读源码</span></span><br><span class="line">        <span class="comment">//1. new Vector() 底层</span></span><br><span class="line">        <span class="comment">/*无参</span></span><br><span class="line"><span class="comment">            public Vector() &#123;</span></span><br><span class="line"><span class="comment">                this(10);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         补充：如果是有参数  Vector vector = new Vector(8);</span></span><br><span class="line"><span class="comment">            走的方法:</span></span><br><span class="line"><span class="comment">            public Vector(int initialCapacity) &#123;</span></span><br><span class="line"><span class="comment">                this(initialCapacity, 0);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         2. vector.add(i)</span></span><br><span class="line"><span class="comment">         2.1  //下面这个方法就添加数据到vector集合</span></span><br><span class="line"><span class="comment">            public synchronized boolean add(E e) &#123;</span></span><br><span class="line"><span class="comment">                modCount++;</span></span><br><span class="line"><span class="comment">                ensureCapacityHelper(elementCount + 1);</span></span><br><span class="line"><span class="comment">                elementData[elementCount++] = e;</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          2.2  //确定是否需要扩容 条件 ： minCapacity - elementData.length&gt;0</span></span><br><span class="line"><span class="comment">            private void ensureCapacityHelper(int minCapacity) &#123;</span></span><br><span class="line"><span class="comment">                // overflow-conscious code</span></span><br><span class="line"><span class="comment">                if (minCapacity - elementData.length &gt; 0)</span></span><br><span class="line"><span class="comment">                    grow(minCapacity);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          2.3 //如果 需要的数组大小 不够用，就扩容 , 扩容的算法</span></span><br><span class="line"><span class="comment">              //newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span></span><br><span class="line"><span class="comment">              //                             capacityIncrement : oldCapacity);</span></span><br><span class="line"><span class="comment">              //就是扩容两倍.</span></span><br><span class="line"><span class="comment">            private void grow(int minCapacity) &#123;</span></span><br><span class="line"><span class="comment">                // overflow-conscious code</span></span><br><span class="line"><span class="comment">                int oldCapacity = elementData.length;</span></span><br><span class="line"><span class="comment">                int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span></span><br><span class="line"><span class="comment">                                                 capacityIncrement : oldCapacity);</span></span><br><span class="line"><span class="comment">                if (newCapacity - minCapacity &lt; 0)</span></span><br><span class="line"><span class="comment">                    newCapacity = minCapacity;</span></span><br><span class="line"><span class="comment">                if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span></span><br><span class="line"><span class="comment">                    newCapacity = hugeCapacity(minCapacity);</span></span><br><span class="line"><span class="comment">                elementData = Arrays.copyOf(elementData, newCapacity);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="双相连表模拟（p17）"><a href="#双相连表模拟（p17）" class="headerlink" title="双相连表模拟（p17）"></a>双相连表模拟（p17）</h1><pre><code>LinkedList的全面说明    1)LinkedList底层实现了双向链表和双端队列特点    2)可以添加任意元素(元素可以重复),包括null    3)**线程不安全,没有实现同步**</code></pre><p>LinkedList的底层操作机制</p><ol><li><strong>LinkedList底层维护了一个双向链表.</strong></li><li>LinkedList中维护了两个属性first和last分别指向首节点和尾节点</li><li>每个节点(Node对象)，里面又维护了prev、next、item三个属性，其中通过prev指向前一个，通过next指向后一个节点。最终实现双向链表.</li><li>所以LinkedList的元素的添加和删除，不是通过数组完成的，相对来说效率较高。</li><li>模拟一个简单的双向链表</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedlLise01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟简单的双向链表</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">han</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;老含&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接三个节点，形成双向链表</span></span><br><span class="line">        <span class="comment">//jack-&gt;tom-&gt;han</span></span><br><span class="line">        jack.next = tom;</span><br><span class="line">        tom.next = han;</span><br><span class="line">        <span class="comment">//han-&gt;tom-&gt;jack</span></span><br><span class="line">        han.pre = tom;</span><br><span class="line">        tom.pre = jack;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> jack;<span class="comment">//让first引用指向jack，就是双线链表的头结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> han;<span class="comment">//让last引用指向han，就是双线链表的尾结点</span></span><br><span class="line">        <span class="comment">//演示，从头到尾进行遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;======从头到尾=======&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出first信息</span></span><br><span class="line">            System.out.println(first);</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;======从尾到头=======&quot;</span>);</span><br><span class="line">        <span class="comment">//演示，从尾到头遍历</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出first信息</span></span><br><span class="line">            System.out.println(last);</span><br><span class="line">            last = last.pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//演示链表添加对象/数据，是多么方便</span></span><br><span class="line">        <span class="comment">//要求在tom和老含之间插入一个对象 Smith</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.先创建一个Node结点，name就是smith</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">smith</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line"></span><br><span class="line">        smith.next = han;</span><br><span class="line">        smith.pre = tom;</span><br><span class="line">        han.pre = smith;</span><br><span class="line">        tom.next = smith;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//让first再次指向第一个jack</span></span><br><span class="line">        first = jack;</span><br><span class="line">        System.out.println(<span class="string">&quot;======插入结点遍历=======&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出first信息</span></span><br><span class="line">            System.out.println(first);</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        让last再次指向最后han</span></span><br><span class="line">       last = han;</span><br><span class="line">        System.out.println(<span class="string">&quot;======插入结点从尾到头 遍历=======&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出first信息</span></span><br><span class="line">            System.out.println(last);</span><br><span class="line">            last = last.pre;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个Node类，Node对象 表示双向链表的一个节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object item;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line">    <span class="keyword">public</span> Node pre;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.item = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node name=&quot;</span>+ item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">======从头到尾=======</span></span><br><span class="line"><span class="comment">Node name=jack</span></span><br><span class="line"><span class="comment">Node name=tom</span></span><br><span class="line"><span class="comment">Node name=老含</span></span><br><span class="line"><span class="comment">======从尾到头=======</span></span><br><span class="line"><span class="comment">Node name=老含</span></span><br><span class="line"><span class="comment">Node name=tom</span></span><br><span class="line"><span class="comment">Node name=jack</span></span><br><span class="line"><span class="comment">======插入结点遍历=======</span></span><br><span class="line"><span class="comment">Node name=jack</span></span><br><span class="line"><span class="comment">Node name=tom</span></span><br><span class="line"><span class="comment">Node name=smith</span></span><br><span class="line"><span class="comment">Node name=老含</span></span><br><span class="line"><span class="comment">======插入结点从尾到头 遍历=======</span></span><br><span class="line"><span class="comment">Node name=老含</span></span><br><span class="line"><span class="comment">Node name=smith</span></span><br><span class="line"><span class="comment">Node name=tom</span></span><br><span class="line"><span class="comment">Node name=jack</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h1 id="LinkedList底层结构（p18）"><a href="#LinkedList底层结构（p18）" class="headerlink" title="LinkedList底层结构（p18）"></a>LinkedList底层结构（p18）</h1><p>CRUD :增删改查</p><p>LinkedList源码图解<br><img src="https://img-blog.csdnimg.cn/img_convert/065e65555c8b25694487ba797b028357.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListCURD</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        linkedList.add(<span class="number">1</span>);</span><br><span class="line">        linkedList.add(<span class="number">2</span>);</span><br><span class="line">        linkedList.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;linkedList=&quot;</span>+linkedList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示一个删除结点</span></span><br><span class="line">        linkedList.remove();<span class="comment">//默认删除第一个</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;linkedlist=&quot;</span>+linkedList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为LinkedList 是 实现了List接口, 遍历方式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======迭代器遍历=======&quot;</span>);</span><br><span class="line">         <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> linkedList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;next=&quot;</span>+next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===增强for====&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Object o : linkedList)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;o=&quot;</span>+o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======for循环======&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;linkedList.size() ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;linkedList&quot;</span>+linkedList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//源码解读：添加流程</span></span><br><span class="line">        <span class="comment">/* 1. LinkedList linkedList = new LinkedList();</span></span><br><span class="line"><span class="comment">              public LinkedList() &#123;&#125;</span></span><br><span class="line"><span class="comment">        2. 这时 linkeList 的属性 first = null  last = null</span></span><br><span class="line"><span class="comment">        3.执行</span></span><br><span class="line"><span class="comment">            public boolean add(E e) &#123;</span></span><br><span class="line"><span class="comment">                linkLast(e);</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">               &#125;</span></span><br><span class="line"><span class="comment">        4. 将新的结点，加入到双向链表的最后</span></span><br><span class="line"><span class="comment">            void linkLast(E e) &#123;</span></span><br><span class="line"><span class="comment">               final Node&lt;E&gt; l = last;</span></span><br><span class="line"><span class="comment">               final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span></span><br><span class="line"><span class="comment">               last = newNode;</span></span><br><span class="line"><span class="comment">               if (l == null)</span></span><br><span class="line"><span class="comment">                   first = newNode;</span></span><br><span class="line"><span class="comment">               else</span></span><br><span class="line"><span class="comment">                   l.next = newNode;</span></span><br><span class="line"><span class="comment">               size++;</span></span><br><span class="line"><span class="comment">               modCount++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        源码解读：linkedList.remove();//默认删除第一个</span></span><br><span class="line"><span class="comment">        1. 执行 removeFirst</span></span><br><span class="line"><span class="comment">            public E remove() &#123;</span></span><br><span class="line"><span class="comment">                return removeFirst();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         2. 执行</span></span><br><span class="line"><span class="comment">            public E removeFirst() &#123;</span></span><br><span class="line"><span class="comment">                final Node&lt;E&gt; f = first;</span></span><br><span class="line"><span class="comment">                if (f == null)</span></span><br><span class="line"><span class="comment">                    throw new NoSuchElementException();</span></span><br><span class="line"><span class="comment">                return unlinkFirst(f);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          3. 执行 unlinkFirst, 将 f 指向的双向链表的第一个结点拿掉</span></span><br><span class="line"><span class="comment">            private E unlinkFirst(Node&lt;E&gt; f) &#123;</span></span><br><span class="line"><span class="comment">                // assert f == first &amp;&amp; f != null;</span></span><br><span class="line"><span class="comment">                final E element = f.item;</span></span><br><span class="line"><span class="comment">                final Node&lt;E&gt; next = f.next;</span></span><br><span class="line"><span class="comment">                f.item = null;</span></span><br><span class="line"><span class="comment">                f.next = null; // help GC</span></span><br><span class="line"><span class="comment">                first = next;</span></span><br><span class="line"><span class="comment">                if (next == null)</span></span><br><span class="line"><span class="comment">                    last = null;</span></span><br><span class="line"><span class="comment">                else</span></span><br><span class="line"><span class="comment">                    next.prev = null;</span></span><br><span class="line"><span class="comment">                size--;</span></span><br><span class="line"><span class="comment">                modCount++;</span></span><br><span class="line"><span class="comment">                return element;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为LinkedList 是 实现了List接口, 遍历方式：迭代器，增强for，for循环</p><h1 id="Arraylist和LinkedList比较"><a href="#Arraylist和LinkedList比较" class="headerlink" title="Arraylist和LinkedList比较"></a>Arraylist和LinkedList比较</h1><img src="https://img-blog.csdnimg.cn/img_convert/2e6dedcb7c55a7265e38cf9d9aac722d.png"><img src="https://img-blog.csdnimg.cn/img_convert/8dd4aba52e3041d006f2228f3b6cd1a0.png"><hr><h1 id="Set接口方法"><a href="#Set接口方法" class="headerlink" title="Set接口方法"></a>Set接口方法</h1><ul><li>接口的实现类的对象(Set接口对象)，不能存放重复的元素，可以添加一个null</li><li>set接口<strong>无序</strong>（添加和取出元素的顺序不一样），且没有索引，不支持随机访问</li><li>不允许有重复元素，所以最多有一个null- </li><li>和List接口一样，Set接口也是Collection接口的子接口，因此，常用方法和Collection- 口一样</li><li>注意：取出的数据虽然不是添加的顺序，但是它是固定的。<blockquote><p>遍历</p></blockquote></li><li>同Collection接口遍历方式一样，因为Set接口是Collection接口的子接口，所以Set接口- 遍历可以使用迭代器和增强for循环-<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(<span class="string">&quot;next=&quot;</span>+next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增强for</span></span><br><span class="line"><span class="keyword">for</span> (Object o: set) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;o=&quot;</span>+o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>不能用for循环</li><li>不能使用索引来获取</li></ul><h1 id="HashSet全面说明（p21）"><a href="#HashSet全面说明（p21）" class="headerlink" title="HashSet全面说明（p21）"></a>HashSet全面说明（p21）</h1><ol><li><p>HashSet实现了Set接口</p></li><li><p>HashSet底层实际上是HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>可以存放null值,但是只能有一个null</p></li><li><p>HashSet不保证元素是有序的,取决于hash后，再确定索引的结果.(即，不保证存放元素的顺序和取出顺序一致)</p></li><li><p>不能有重复元素&#x2F;对象.在前面Set 接口使用已经讲过</p></li></ol><blockquote><p>在执行add方法后会返回一个boolean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"><span class="comment">//在执行add方法后会返回一个boolean</span></span><br><span class="line">System.out.println(set.add(<span class="string">&quot;john&quot;</span>));<span class="comment">//true</span></span><br><span class="line">System.out.println(set.add(<span class="string">&quot;lucy&quot;</span>));<span class="comment">//true</span></span><br><span class="line">System.out.println(set.add(<span class="string">&quot;john&quot;</span>));<span class="comment">//false</span></span><br><span class="line">System.out.println(set.add(<span class="string">&quot;jack&quot;</span>));<span class="comment">//true</span></span><br><span class="line">System.out.println(set.add(<span class="string">&quot;Rose&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="comment">//在执行add方法后会返回一个boolean</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;john&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;lucy&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;john&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;jack&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;Rose&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.add(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;tom&quot;</span>));<span class="comment">//ok</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;tom&quot;</span>));<span class="comment">//ok</span></span><br><span class="line">        System.out.println(<span class="string">&quot;set=&quot;</span> + set);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加深，非常经典面试题</span></span><br><span class="line">        <span class="comment">//看源码，做分析</span></span><br><span class="line">        <span class="comment">//去看他的源码，即add到底发生了什么=&gt;底层机制</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hsp&quot;</span>));<span class="comment">//ok</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hsp&quot;</span>));<span class="comment">//加入不了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;set=&quot;</span>+ set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;<span class="comment">//定义dog类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加深，非常经典面试题</span></span><br><span class="line"><span class="comment">//看源码，做分析</span></span><br><span class="line"><span class="comment">//去看他的源码，即add到底发生了什么=&gt;底层机制</span></span><br><span class="line">set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hsp&quot;</span>));<span class="comment">//ok</span></span><br><span class="line">set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hsp&quot;</span>));<span class="comment">//加入不了</span></span><br><span class="line">System.out.println(<span class="string">&quot;set=&quot;</span>+ set);</span><br></pre></td></tr></table></figure><p>在存储对象进HashSet时，对象重写equals方法一定要重写hashCode方法，不然就会出现两个对象里面的数据一模一样，但是都可以存进HashSet集合中，因为如果没有重写HashCode方法，对象会使用父类Object类的hashCode方法，而Object的HashCode方法是根据地址来计算的，一定不会一样</p><h1 id="数组链表模拟-p22"><a href="#数组链表模拟-p22" class="headerlink" title="数组链表模拟(p22)"></a>数组链表模拟(p22)</h1><p>HashSet的底层是HashMap,HashMap的底层是数组加链表&#x2F;红黑树</p><p>数组的元素存放节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetStructure</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟一个HashSet的底层 (HashMap 的底层结构)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建一个数组，数组的类型是 Node[]</span></span><br><span class="line">        <span class="comment">//2. 有些人，直接把 Node[] 数组称为 表</span></span><br><span class="line">        Node[] table = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 创建结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;john&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        table[<span class="number">2</span>] = john;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        john.next = jack;<span class="comment">// 将jack 结点挂载到john</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">rose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;Rose&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        jack.next = rose;<span class="comment">// 将rose 结点挂载到jack</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">lucy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;lucy&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        table[<span class="number">3</span>] = lucy; <span class="comment">// 把lucy 放到 table表的索引为3的位置.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;table=&quot;</span> + table);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123; <span class="comment">//结点, 存储数据, 可以指向下一个结点，从而形成链表</span></span><br><span class="line">    Object item; <span class="comment">//存放数据</span></span><br><span class="line">    Node next; <span class="comment">// 指向下一个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object item, Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = item;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="HashSet扩容机制"><a href="#HashSet扩容机制" class="headerlink" title="HashSet扩容机制"></a>HashSet扩容机制</h1><img src="https://img-blog.csdnimg.cn/img_convert/5edc0f42a7768f8060de17bf7322acf1.png"><h1 id="HashSet源码解读-p24"><a href="#HashSet源码解读-p24" class="headerlink" title="HashSet源码解读  (p24)"></a>HashSet源码解读  (p24)</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h1&gt;&lt;p&gt;集合的好处&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以动态保存任意多个对象  ,使用比较方便&lt;/li&gt;
&lt;li&gt;提供了一系列方便的操作对象的方法:add</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="集合" scheme="https://derder1.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>零钱通</title>
    <link href="https://derder1.github.io/2022/07/26/%E9%9B%B6%E9%92%B1%E9%80%9A/"/>
    <id>https://derder1.github.io/2022/07/26/%E9%9B%B6%E9%92%B1%E9%80%9A/</id>
    <published>2022-07-26T02:45:13.000Z</published>
    <updated>2022-08-10T00:42:24.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="零钱通小项目"><a href="#零钱通小项目" class="headerlink" title="零钱通小项目"></a>零钱通小项目</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.smallchange;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmallChangeSys</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.先完成显示菜单，并可以选择菜单</span></span><br><span class="line">    <span class="comment">//2.完成零钱通明细</span></span><br><span class="line">    <span class="comment">//3.完成收益入账 完成功能驱动程序员增加心得变化和代码</span></span><br><span class="line">    <span class="comment">//4.消费</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义相关变量</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">loop</span>  <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">details</span> <span class="operator">=</span> <span class="string">&quot;------------零钱通明细-----------&quot;</span>;</span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>);<span class="comment">//可以用于日期格式化的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.消费</span></span><br><span class="line">        <span class="comment">//定义新的变量</span></span><br><span class="line">        String note;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n=============零钱通==============&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t1零钱通明细&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t2 收益入账&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t3 消费&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t4 退   出&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;请选择1-4:&quot;</span>);</span><br><span class="line">            key = scanner.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用switch分支控制</span></span><br><span class="line">            <span class="keyword">switch</span>(key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    System.out.println(details);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;收益入账金额&quot;</span>);</span><br><span class="line">                    money = scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(money &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;收益入账金额需要大于0&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//正确金额</span></span><br><span class="line">                    <span class="keyword">if</span>(money &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        balance += money;</span><br><span class="line">                        <span class="comment">//拼接收益入账信息到details</span></span><br><span class="line">                        <span class="comment">//</span></span><br><span class="line">                        date = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//获取当前时间</span></span><br><span class="line">                        details += String.format(String.format(<span class="string">&quot;\n收益入账\t+&quot;</span> + money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance));</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;消费金额：&quot;</span>);</span><br><span class="line">                    money = scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//找出金额不正确</span></span><br><span class="line">                    <span class="comment">//过关斩将</span></span><br><span class="line">                    <span class="keyword">if</span>(money &lt;= <span class="number">0</span> || money &gt; balance)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;消费金额应该在0-&quot;</span>+balance);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;消费说明：&quot;</span>);</span><br><span class="line">                    note = scanner.next();</span><br><span class="line">                    balance -= money;</span><br><span class="line">                    <span class="comment">//拼接消费信息到detatils</span></span><br><span class="line">                    date = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//获取当前时间</span></span><br><span class="line">                    details += String.format(String.format(<span class="string">&quot;\n&quot;</span>+note+ <span class="string">&quot;\t\t-&quot;</span>+ money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//(1)定义一个变量choice ，接受用户的输入</span></span><br><span class="line">                    <span class="comment">//使用while+break，处理接收到的输入是 y 或 n</span></span><br><span class="line">                    <span class="comment">//(3)退出while后，再判断choice是y还是n，就可以决定是否退出</span></span><br><span class="line">                    <span class="comment">//建议一段代码，完成一个小功能，尽量不要混在一起</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot; 你确定要退出吗？y/n&quot;</span>);</span><br><span class="line">                        choice = scanner.next();</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;y&quot;</span>.equals(choice)|| <span class="string">&quot;n&quot;</span>.equals(choice))&#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(choice.equals(<span class="string">&quot;y&quot;</span>))&#123;</span><br><span class="line">                        loop = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;选择有误，请重新选择&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(loop);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;退出零钱通&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>界面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">1 零钱通明细</span><br><span class="line">2 收益入账</span><br><span class="line">3 消费</span><br><span class="line">4 退   出</span><br><span class="line">请选择1-4:</span><br><span class="line">1</span><br><span class="line">------------零钱通明细-----------</span><br><span class="line"></span><br><span class="line">=============零钱通==============</span><br><span class="line">1 零钱通明细</span><br><span class="line">2 收益入账</span><br><span class="line">3 消费</span><br><span class="line">4 退   出</span><br><span class="line">请选择1-4:</span><br><span class="line">2</span><br><span class="line">收益入账金额</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line">=============零钱通==============</span><br><span class="line">1 零钱通明细</span><br><span class="line">2 收益入账</span><br><span class="line">3 消费</span><br><span class="line">4 退   出</span><br><span class="line">请选择1-4:</span><br><span class="line">2</span><br><span class="line">收益入账金额</span><br><span class="line">300</span><br><span class="line"></span><br><span class="line">=============零钱通==============</span><br><span class="line">1 零钱通明细</span><br><span class="line">2 收益入账</span><br><span class="line">3 消费</span><br><span class="line">4 退   出</span><br><span class="line">请选择1-4:</span><br><span class="line">3</span><br><span class="line">消费金额：</span><br><span class="line">100</span><br><span class="line">消费说明：</span><br><span class="line">看电影</span><br><span class="line"></span><br><span class="line">=============零钱通==============</span><br><span class="line">1 零钱通明细</span><br><span class="line">2 收益入账</span><br><span class="line">3 消费</span><br><span class="line">4 退   出</span><br><span class="line">请选择1-4:</span><br><span class="line">3</span><br><span class="line">消费金额：</span><br><span class="line">1000</span><br><span class="line">消费金额应该在0-300.0</span><br><span class="line"></span><br><span class="line">=============零钱通==============</span><br><span class="line">1 零钱通明细</span><br><span class="line">2 收益入账</span><br><span class="line">3 消费</span><br><span class="line">4 退   出</span><br><span class="line">请选择1-4:</span><br><span class="line">1</span><br><span class="line">------------零钱通明细-----------</span><br><span class="line">收益入账+100.02022-07-28 11:18100.0</span><br><span class="line">收益入账+300.02022-07-28 11:18400.0</span><br><span class="line">看电影    -100.02022-07-28 11:18300.0</span><br><span class="line"></span><br><span class="line">=============零钱通==============</span><br><span class="line">1 零钱通明细</span><br><span class="line">2 收益入账</span><br><span class="line">3 消费</span><br><span class="line">4 退   出</span><br><span class="line">请选择1-4:</span><br><span class="line">4</span><br><span class="line"> 你确定要退出吗？y/n</span><br><span class="line">1</span><br><span class="line"> 你确定要退出吗？y/n</span><br><span class="line">2</span><br><span class="line"> 你确定要退出吗？y/n</span><br><span class="line">n</span><br><span class="line"></span><br><span class="line">=============零钱通==============</span><br><span class="line">1 零钱通明细</span><br><span class="line">2 收益入账</span><br><span class="line">3 消费</span><br><span class="line">4 退   出</span><br><span class="line">请选择1-4:</span><br><span class="line">4</span><br><span class="line"> 你确定要退出吗？y/n</span><br><span class="line">y</span><br><span class="line">退出零钱通</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="零钱通面向对象编程"><a href="#零钱通面向对象编程" class="headerlink" title="零钱通面向对象编程"></a>零钱通面向对象编程</h1><p>将各个功能对应一个方法</p><blockquote><p>main方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.smallchange.oop;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里直接调用SmallChangeSysOOP对象，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmallChangeSysApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SmallChangeSysOOP</span>().mainMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>SmallChangeSysOOP类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.smallchange.oop;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">完成零钱通各个功能</span></span><br><span class="line"><span class="comment"> 面向对象编程</span></span><br><span class="line"><span class="comment">将各个功能对应一个方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmallChangeSysOOP</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">loop</span>  <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">details</span> <span class="operator">=</span> <span class="string">&quot;------------零钱通明细-----------&quot;</span>;</span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>);<span class="comment">//可以用于日期格式化的</span></span><br><span class="line"></span><br><span class="line">    String note;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mainMenu</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n=============零钱通菜单OOP==============&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t1零钱通明细&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t2 收益入账&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t3 消费&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t4 退   出&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;请选择1-4:&quot;</span>);</span><br><span class="line">            key = scanner.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用switch分支控制</span></span><br><span class="line">            <span class="keyword">switch</span>(key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.detail();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.income();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.pay();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.exit();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;选择有误，请重新选择&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(loop);</span><br><span class="line">        System.out.println(<span class="string">&quot;退出零钱通&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//完成零钱通明细</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detail</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(details);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成收益入账</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">income</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收益入账金额&quot;</span>);</span><br><span class="line">        money = scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(money &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收益入账金额需要大于0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//退出方法，不再执行后面的代码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正确金额</span></span><br><span class="line">        <span class="keyword">if</span>(money &gt;<span class="number">0</span>)&#123;</span><br><span class="line">            balance += money;</span><br><span class="line">            <span class="comment">//拼接收益入账信息到details</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            date = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//获取当前时间</span></span><br><span class="line">            details += String.format(String.format(<span class="string">&quot;\n收益入账\t+&quot;</span> + money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费金额：&quot;</span>);</span><br><span class="line">        money = scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找出金额不正确</span></span><br><span class="line">        <span class="comment">//过关斩将</span></span><br><span class="line">        <span class="keyword">if</span>(money &lt;= <span class="number">0</span> || money &gt; balance)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费金额应该在0-&quot;</span>+balance);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费说明：&quot;</span>);</span><br><span class="line">        note = scanner.next();</span><br><span class="line">        balance -= money;</span><br><span class="line">        <span class="comment">//拼接消费信息到detatils</span></span><br><span class="line">        date = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//获取当前时间</span></span><br><span class="line">        details += String.format(String.format(<span class="string">&quot;\n&quot;</span>+note+ <span class="string">&quot;\t\t-&quot;</span>+ money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1)定义一个变量choice ，接受用户的输入</span></span><br><span class="line">        <span class="comment">//使用while+break，处理接收到的输入是 y 或 n</span></span><br><span class="line">        <span class="comment">//(3)退出while后，再判断choice是y还是n，就可以决定是否退出</span></span><br><span class="line">        <span class="comment">//建议一段代码，完成一个小功能，尽量不要混在一起</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; 你确定要退出吗？y/n&quot;</span>);</span><br><span class="line">            choice = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;y&quot;</span>.equals(choice)|| <span class="string">&quot;n&quot;</span>.equals(choice))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(choice.equals(<span class="string">&quot;y&quot;</span>))&#123;</span><br><span class="line">            loop = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;零钱通小项目&quot;&gt;&lt;a href=&quot;#零钱通小项目&quot; class=&quot;headerlink&quot; title=&quot;零钱通小项目&quot;&gt;&lt;/a&gt;零钱通小项目&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="零钱通" scheme="https://derder1.github.io/tags/%E9%9B%B6%E9%92%B1%E9%80%9A/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="https://derder1.github.io/2022/07/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://derder1.github.io/2022/07/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2022-07-25T04:03:15.000Z</published>
    <updated>2022-08-08T09:25:19.932Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1V4411p7EF?p=4&vd_source=0c82d50ac822c5e1f490f06791c748ad">狂神说</a></p><h1 id="线程-进程-多线程"><a href="#线程-进程-多线程" class="headerlink" title="线程 进程 多线程"></a>线程 进程 多线程</h1><h2 id="一、多线程"><a href="#一、多线程" class="headerlink" title="一、多线程"></a>一、多线程</h2><img src="https://s1.imagehub.cc/images/2022/08/04/image92c75c020e6e6e9b.png"><h3 id="Process-进程-与Thread-线程"><a href="#Process-进程-与Thread-线程" class="headerlink" title="Process(进程)与Thread(线程)"></a>Process(进程)与Thread(线程)</h3><ul><li><p>说起进程,就不得不说下程序。程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</p></li><li><p>而进程则是执行程序的依次执行过程，它是一个动态的概念。是系统资源分配的单位。</p></li><li><p>通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程是CPU调度和执行的单位。</p><blockquote><p>注意：<br>​ 很多多线程是模拟出来的，真正的多线程是指有多个cpu，即多核，如服务器。如果是模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所以就有同时执行的错局。</p></blockquote></li></ul><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li>线程就是独立的执行路径</li><li>在程序运行时,即使没有自己创建线程,后台也会有多个线程,比如主线程,GC线程</li><li>main()称之为主线程,为系统的入口,用于执行整个程序</li><li>在一个进程中,如果开辟了多个线程,线程的运行是由调度器（cpu）安排调度的,调度器是与操作系统紧密相关的,先后顺序是不能人为干预的</li><li>对同一份资源操作时mm会存在资源抢夺的问题,需要加入并发控制</li><li>线程会带来额外的开销,如CPU调度时间,并发控制开销</li><li>每个线程在自己的工作内存交互,内存控制不当会造成数据不一致</li></ul><h1 id="二、线程"><a href="#二、线程" class="headerlink" title="二、线程"></a>二、线程</h1><h2 id="1-线程创建"><a href="#1-线程创建" class="headerlink" title="1.线程创建"></a>1.线程创建</h2> <img src="https://s1.imagehub.cc/images/2022/07/29/image38cd3993ec3f7094.md.png"><h3 id="1-1-继承Thread类（重要）"><a href="#1-1-继承Thread类（重要）" class="headerlink" title="1.1 继承Thread类（重要）"></a>1.1 继承Thread类（重要）</h3><pre><code>自定义线程类继承Thread类重写run()方法，编写线程执行体创建线程对象，调用start()方法启动线程</code></pre><blockquote><p>代码实现<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.demo01;</span><br><span class="line"><span class="comment">//创建线程方式一：继承Thread类，重写run（）方法，调用start开始线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">20</span> ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在看代码&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//main线程，主线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个线程对象</span></span><br><span class="line">        <span class="type">TestThread1</span> <span class="variable">testThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread1</span>();</span><br><span class="line">        <span class="comment">//调用start（）方法开启线程</span></span><br><span class="line">        testThread1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">200</span> ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习多线程————&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我在看代码0</span></span><br><span class="line"><span class="comment">我在学习多线程————0</span></span><br><span class="line"><span class="comment">我在看代码1</span></span><br><span class="line"><span class="comment">我在学习多线程————1</span></span><br><span class="line"><span class="comment">我在看代码2</span></span><br><span class="line"><span class="comment">我在学习多线程————2</span></span><br><span class="line"><span class="comment">我在看代码3</span></span><br><span class="line"><span class="comment">我在学习多线程————3</span></span><br><span class="line"><span class="comment">我在看代码4</span></span><br><span class="line"><span class="comment">我在学习多线程————4</span></span><br><span class="line"><span class="comment">我在看代码5</span></span><br><span class="line"><span class="comment">我在学习多线程————5</span></span><br><span class="line"><span class="comment">我在看代码6</span></span><br><span class="line"><span class="comment">我在学习多线程————6</span></span><br><span class="line"><span class="comment">我在看代码7</span></span><br><span class="line"><span class="comment">我在看代码8</span></span><br><span class="line"><span class="comment">我在学习多线程————7</span></span><br><span class="line"><span class="comment">我在看代码9</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br>总结<br> 线程开启不一定立即执行，CPU安排调度</p></blockquote><h1 id="网图下载-p4"><a href="#网图下载-p4" class="headerlink" title="网图下载(p4)"></a>网图下载(p4)</h1><p>去看io了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1V4411p7EF?p=4&amp;vd_source=0c82d50ac822c5e1f490f06791c748ad&quot;&gt;狂神说&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;线程-进程-多线程&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="多线程" scheme="https://derder1.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建</title>
    <link href="https://derder1.github.io/2022/07/24/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://derder1.github.io/2022/07/24/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2022-07-24T06:11:52.000Z</published>
    <updated>2022-08-13T01:49:43.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="彻夜之歌"><a href="#彻夜之歌" class="headerlink" title="彻夜之歌"></a>彻夜之歌</h1><img src="https://pics0.baidu.com/feed/8b13632762d0f7034421080b0eb6fb372797c529.jpeg?token=2590ba135c54f491408db56599299f62"><h1 id="Lycoris-Recoil-莉可丽丝"><a href="#Lycoris-Recoil-莉可丽丝" class="headerlink" title="Lycoris Recoil 莉可丽丝"></a>Lycoris Recoil 莉可丽丝</h1> <img src="https://w.wallhaven.cc/full/g7/wallhaven-g7rxxe.jpg"><h1 id="吹响吧！上低音号"><a href="#吹响吧！上低音号" class="headerlink" title="吹响吧！上低音号"></a>吹响吧！上低音号</h1><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201701%2F07%2F20170107225237_xdiu3.png&refer=http%3A%2F%2Fb-ssl.duitang.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1662908578&t=ce6c08fd1bda5735a88d8e9ca99bb4fe"><h1 id="java可选择岗位"><a href="#java可选择岗位" class="headerlink" title="java可选择岗位"></a>java可选择岗位</h1><p> 后台开发 安卓开发 大数据 应用开发 游戏开发 软件测试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;彻夜之歌&quot;&gt;&lt;a href=&quot;#彻夜之歌&quot; class=&quot;headerlink&quot; title=&quot;彻夜之歌&quot;&gt;&lt;/a&gt;彻夜之歌&lt;/h1&gt;&lt;img src=&quot;https://pics0.baidu.com/feed/8b13632762d0f7034421080b0e</summary>
      
    
    
    
    <category term="博客" scheme="https://derder1.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="butterfly" scheme="https://derder1.github.io/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>注解和反射</title>
    <link href="https://derder1.github.io/2022/07/24/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
    <id>https://derder1.github.io/2022/07/24/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</id>
    <published>2022-07-24T00:02:36.000Z</published>
    <updated>2022-08-07T06:25:02.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="1-注解入门"><a href="#1-注解入门" class="headerlink" title="1.注解入门"></a>1.注解入门</h2><h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h3><p>Annotation 是从JDK 5.0开始引入的新技术。</p><h3 id="Annotation的作用"><a href="#Annotation的作用" class="headerlink" title="Annotation的作用"></a>Annotation的作用</h3><ul><li>不是程序本身，可以对程序作出解释（这一点和注释（comment）没什么区别）</li><li>可以被其他程序（比如：编译器等）读取</li></ul><h3 id="注解格式"><a href="#注解格式" class="headerlink" title="注解格式"></a>注解格式</h3><p>注解是以“@注释名”在代码中存储在的，还可以添加一些参数值，例如：@SuppressWarnings（value&#x3D;“unchecked”）.</p><h2 id="2-内置注解"><a href="#2-内置注解" class="headerlink" title="2. 内置注解"></a>2. 内置注解</h2><p><strong>@Override：</strong></p><ul><li>定义在java.lang.Override 中，此注解只使用于修辞方法，</li><li>表示一个方法声明打算重写超类中的另一个方法声明。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.liu.annotation;</span><br><span class="line"><span class="comment">//什么是注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text01</span> <span class="keyword">extends</span> <span class="title class_">Object</span> &#123;</span><br><span class="line"><span class="comment">//  @Override   重写注解</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>@Deprecated：</strong></p><ul><li>定义在java.lang.Deprecated中，此注解，可以用于修辞方法、属性、类、表示不鼓励程序员使用这样的元素，</li><li>同时是因为它很危险或者存在更好的选择。（一般来说表示废弃了的方法、或者类等等）</li></ul><p><strong>@SuppressWarnings：</strong></p><ul><li><p>定义在java.lang.SuppressWarings 中，用来抑制编译时的警告信息，</p></li><li><p>与前两个注解有所不同，需要添加一个参数才能正确使用，这些参数都是已经定义好了的</p></li></ul><p>@SuppressWarnings（“all”）</p><p>@SuppressWarnings（“unchecked”）</p><p>@SuppressWarnings（value&#x3D;{“unchecked”，“deprecation”}）<br>等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span><span class="comment">//全部</span></span><br></pre></td></tr></table></figure><h2 id="3-元注解"><a href="#3-元注解" class="headerlink" title="3. 元注解"></a>3. 元注解</h2><pre><code>元注解的作用：    负责注解其他注解，    Java定义了四个（元注解）标准的meta-annotation类型，它们被用来提供对其他annotation 类型做说明。这些类型和它们锁支持的类在java.langannotation 包中可以找到（@Target，@Retention，@Documented，@Inherited）    ==@Target：==用于描述注解的使用范围（即：被描述的注解可以用在什么地方） 目标    ==@Retention：==表示需要在什么级别保存该注解信息，用于描述注解的生命周期    （SOURCE（源代码） &lt; CLASS（字节码） &lt; RUNTIEM（运行时）【框架】）    一般定义的都是 RUNTIEM（运行时）@Document：说明该注解将被包含在javadoc中 文档注释@Inherited：说明子类可以继承父类中的该注解</code></pre><h2 id="4-自定义注解"><a href="#4-自定义注解" class="headerlink" title="4.自定义注解"></a>4.自定义注解</h2><p>使用@interface自定义注解是，自动继承了java.lang.annotation.Annotation接口</p><p><strong>分析</strong></p><ul><li><p>@Interited 用来声明一个注解，格式：public @ interface注解名{ 定义内容 }</p></li><li><p>其中的每一个方法实际上是声明了一个配置参数</p></li><li><p>方法的名称就是参数的名称</p></li><li><p>返回值类型就是参数的类型（返回值只能是基本类型，Class，String，enum）。</p></li><li><p>可以通过default 来声明参数的默认值</p></li><li><p>如果只有一个参数成员，一般参数名为value</p></li><li><p>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test03</span> &#123;</span><br><span class="line">    <span class="meta">@MyAnnotation2(name = &quot;琴江&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation3(&quot;琴江&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(&#123;ElementType.ANNOTATION_TYPE.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="comment">//注解的参数：参数类型+参数名+（）</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span> ;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;<span class="comment">//默认值为-1，代表不存在</span></span><br><span class="line"></span><br><span class="line">    String[] schools() <span class="keyword">default</span> &#123;<span class="string">&quot;西部开源&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射-Reflection-机制"><a href="#反射-Reflection-机制" class="headerlink" title="反射(Reflection)机制"></a>反射(Reflection)机制</h1><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>动态语言</p></blockquote><ul><li><p>是一 <strong>类在运行时可以改变其结构的 语言：</strong> 例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。</p></li><li><p>通俗点说就是<strong>在程序运行时可以根据某些条件改变自身结构。</strong></p></li><li><p>主要动态语言：Object-C、C#、JavaScript、PHP、Python等。</p></li></ul><blockquote><p>静态语言</p></blockquote><ul><li><p>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。</p></li><li><p>Java不是动态语言，但Java可以称之为“准动态语言”。</p></li><li><p>即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。</p></li><li><p>Java的动态性让编程的时候更加灵活！</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动态语言：</span></span><br><span class="line"><span class="comment">    在程序运行的时候可以改变x的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;var a=3;var b=5;alert(a+b)&quot;</span>;</span><br><span class="line">    <span class="built_in">eval</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>类加载完之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象)，</p></li><li><p>这个对象就包含了完整的类的结构信息。</p><img src="https://www.helloimg.com/images/2022/07/24/Zwa05S.png"></li></ul><h2 id="获取反射对象"><a href="#获取反射对象" class="headerlink" title="获取反射对象"></a>获取反射对象</h2><blockquote><p>Java 反射机制提供的功能</p></blockquote><ul><li><p>在运行时判断任意一个对象所属的类</p></li><li><p>在运行时构造任意一个类的对象</p></li><li><p>在运行时判断任意一个类所具有的成员变量和方法</p></li><li><p>在运行时获取泛型信息</p></li><li><p>在运行时调用任意一个对象的成员变量和方法</p></li><li><p>在运行时处理注解</p></li><li><p>生成动态代理（机制 AOP用到 框架里边大量用到）</p></li></ul><blockquote><p>优点<br>可以实现动态创建对象和编译，体现出很大的灵活性</p></blockquote><blockquote><p>缺点</p></blockquote><ul><li>对性能有影响。</li><li>使用反射基本上是一种解释操作，我们可以告诉JVM（虚拟机），我们希望做什么并且它满足我们的要求。</li><li>这类操作总是慢于直接执行相同的操作。</li></ul><blockquote><p>反射主要API</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Class ：代表一个类，核心类</span><br><span class="line">java.lang.reflect.Method：代表类的方法</span><br><span class="line">java.lang.reflect.Field：代表类的成员变量</span><br><span class="line">java.lang.reflect.Constructor：代表类的构造器</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test02</span> <span class="keyword">extends</span> <span class="title class_">Object</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//通过反射获取类的class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.liu.annotation.User&quot;</span>);</span><br><span class="line">        System.out.println(cl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.liu.annotation.User&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.liu.annotation.User&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.liu.annotation.User&quot;</span>);</span><br><span class="line">        <span class="comment">//一个类在一个内存中只有一个Class对象</span></span><br><span class="line">        <span class="comment">//一个类被夹在后，类的整个结构都会被封装在Class对象中</span></span><br><span class="line">        <span class="comment">//三个输出的结果相等</span></span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        System.out.println(c4.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class com.liu.annotation.User</span></span><br><span class="line"><span class="comment">2083562754</span></span><br><span class="line"><span class="comment">2083562754</span></span><br><span class="line"><span class="comment">2083562754</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在Object类中定义了以下的方法，此方法将被所有子类继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span>  <span class="title function_">getClass</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p><strong>可以通过对象反射求出类的名称。</strong></p><p>无论有多少个对象，创建出来的Class只有一个Class真正的实例</p><img src="https://www.helloimg.com/images/2022/07/24/ZwaNsC.png"><h2 id="Class类常用方法"><a href="#Class类常用方法" class="headerlink" title="Class类常用方法"></a>Class类常用方法</h2><img src="https://www.helloimg.com/images/2022/07/24/Zw1Cz0.png"><h2 id="获取Class类的实例"><a href="#获取Class类的实例" class="headerlink" title="获取Class类的实例"></a>获取Class类的实例</h2><ol><li>若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Student.class;</span><br></pre></td></tr></table></figure></li><li>已知某个类的实例，调用该实例的getClass()方法获取Class对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> person.getClass();</span><br></pre></td></tr></table></figure></li><li>已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.liu.reflection.Student&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>内置基本数据类型可以直接用类名.Type<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Integer.TYPE;</span><br></pre></td></tr></table></figure></li><li>还可以利用ClassLoader我们之后讲解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.annotation;</span><br><span class="line"><span class="comment">//测试class类的创建方式有哪些</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;这个人是&quot;</span>+person.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：通过对象获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        <span class="comment">//方式二：forname获得</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.liu.annotation.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：通过类名.class获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式四：基本内置类型的包装类都有一个Type属性</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得父类类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;teacher&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个人是学生</span></span><br><span class="line"><span class="comment">1239731077</span></span><br><span class="line"><span class="comment">1239731077</span></span><br><span class="line"><span class="comment">1239731077</span></span><br><span class="line"><span class="comment">int</span></span><br><span class="line"><span class="comment">class com.liu.annotation.Person</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="哪些类型可以有Class对象"><a href="#哪些类型可以有Class对象" class="headerlink" title="哪些类型可以有Class对象"></a>哪些类型可以有Class对象</h2><pre><code>class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类。interface：接口[] ：数组enum：枚举annotation：注解 @interfaceprimitive type ：基本数据类型void</code></pre><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class;<span class="comment">//类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Comparable.class;<span class="comment">//接口</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> String[].class;<span class="comment">//一维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="type">int</span>[][].class;<span class="comment">//二维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> Override.class;<span class="comment">//注解</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c6</span> <span class="operator">=</span>  ElementType.class;<span class="comment">//枚举</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> Integer.class;<span class="comment">//基本数据类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> <span class="keyword">void</span>.class;<span class="comment">//void</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> Class.class;<span class="comment">//Class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line">        <span class="comment">//运行结果</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        class java.lang.Object</span></span><br><span class="line"><span class="comment">        interface java.lang.Comparable</span></span><br><span class="line"><span class="comment">        class [Ljava.lang.String;</span></span><br><span class="line"><span class="comment">        class [[I</span></span><br><span class="line"><span class="comment">        interface java.lang.Override</span></span><br><span class="line"><span class="comment">        class java.lang.annotation.ElementType</span></span><br><span class="line"><span class="comment">        class java.lang.Integer</span></span><br><span class="line"><span class="comment">        void</span></span><br><span class="line"><span class="comment">        class java.lang.Class</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//只要元素类型与维度一样，就是同一个class</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line">        <span class="comment">//运行结果</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        2083562754</span></span><br><span class="line"><span class="comment">        2083562754</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="java-内存分析"><a href="#java-内存分析" class="headerlink" title="java 内存分析"></a>java 内存分析</h1><img src="https://www.helloimg.com/images/2022/07/24/Zw1h0S.png"><p>类的加载过程<br><img src="https://www.helloimg.com/images/2022/07/24/Zw3V3n.png"></p><p>类的加载与ClassLoader的理解<br><img src="https://www.helloimg.com/images/2022/07/24/Zw3kr6.png"></p><p>代码例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.ls.LSOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(a.m);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.加载到内存，会产生一个类对应class对象</span></span><br><span class="line"><span class="comment">        2.连接，连接结束后m=0；</span></span><br><span class="line"><span class="comment">        3.初始化</span></span><br><span class="line"><span class="comment">            &lt;clinit&gt;()&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;A类静态代码块&quot;)</span></span><br><span class="line"><span class="comment">            m=300;</span></span><br><span class="line"><span class="comment">            m=100;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类静态代码块&quot;</span>);</span><br><span class="line">        m=<span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> m=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类无参构造初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">执行结果</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A类静态代码块</span></span><br><span class="line"><span class="comment">A类无参构造初始化</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="什么时候会发生类初始化"><a href="#什么时候会发生类初始化" class="headerlink" title="什么时候会发生类初始化"></a>什么时候会发生类初始化</h2><p>类分为主动引用，被动引用</p><h3 id="主动引用（一定会发生类的初始化）、"><a href="#主动引用（一定会发生类的初始化）、" class="headerlink" title="主动引用（一定会发生类的初始化）、"></a>主动引用（一定会发生类的初始化）、</h3><ol><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用java.lang.reflect（静态）包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ol><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.liu.annotation;</span><br><span class="line"><span class="comment">//测试类什么时候会初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test06</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//1.主动引用,先初始化父类，在加载子类</span></span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        <span class="comment">//反射也会产生主动引用，会把所有东西加载进来</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.liu.annotation.Son&quot;</span>);        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">        m=<span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> m=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> M=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果，两个都是</span></span><br><span class="line"></span><br><span class="line">Main类被加载</span><br><span class="line">父类被加载</span><br><span class="line">子类被加载</span><br></pre></td></tr></table></figure><h3 id="被动引用（不会发生类的初始化）"><a href="#被动引用（不会发生类的初始化）" class="headerlink" title="被动引用（不会发生类的初始化）"></a>被动引用（不会发生类的初始化）</h3><pre><code>1. 当访问一个静态域时，只有真正声明这个域的类才会被初始化。    如：当通过子类引用父类的静态变量，不会导致子类初始化2. 通过数组定义类引用，不会触发此类的初始化3. 引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了)</code></pre><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.annotation;</span><br><span class="line"><span class="comment">//测试类什么时候会初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test06</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不会产生类的引用的方法</span></span><br><span class="line">        <span class="comment">// System.out.println(Son.b);</span></span><br><span class="line">        <span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">        Main类被加载</span></span><br><span class="line"><span class="comment">        父类被加载</span></span><br><span class="line"><span class="comment">        2</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//Son[] array = new Son[5];</span></span><br><span class="line">        <span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">        Main类被加载</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(Son.M);</span><br><span class="line">        <span class="comment">/*输出结果</span></span><br><span class="line"><span class="comment">        Main类被加载</span></span><br><span class="line"><span class="comment">        1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">        m=<span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> m=<span class="number">100</span>;</span><br><span class="line">    <span class="comment">//静态常量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> M=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载器的作用</p><p>看不懂了，以后回来接着学</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h1&gt;&lt;h2 id=&quot;1-注解入门&quot;&gt;&lt;a href=&quot;#1-注解入门&quot; class=&quot;headerlink&quot; title=&quot;1.注解入门&quot;&gt;&lt;/a&gt;1</summary>
      
    
    
    
    <category term="java" scheme="https://derder1.github.io/categories/java/"/>
    
    
    <category term="注解反射" scheme="https://derder1.github.io/tags/%E6%B3%A8%E8%A7%A3%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
</feed>
